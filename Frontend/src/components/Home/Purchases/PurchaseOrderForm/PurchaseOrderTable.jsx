import React, {useState, useCallback, useMemo, useEffect} from "react";
import {
  Container,
  Row,
  Col,
  Button,
  Table,
  Badge,
  Dropdown,
  InputGroup,
  Form,
  Spinner,
  Alert,
  Modal,
  ButtonGroup,
} from "react-bootstrap";
import {useNavigate, useLocation} from "react-router-dom";
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {
  faSearch,
  faChartBar,
  faFileExcel,
  faSort,
  faEllipsisV,
  faEye,
  faEdit,
  faTrash,
  faCopy,
  faShare,
  faTruck,
  faCheck,
  faClipboardList,
  faDownload,
  faExchangeAlt,
  faPlus,
  faSpinner,
  faBoxes,
  faFileInvoice,
  faClock,
  faCheckCircle,
  faTimesCircle,
  faExclamationTriangle,
  faRobot,
  faUser,
  faBuilding,
  faProjectDiagram,
  faArrowRight,
  faList,
  faUserTie,
  faTags,
  faPrint, // ✅ ADD THIS
} from "@fortawesome/free-solid-svg-icons";
import purchaseOrderService from "../../../../services/purchaseOrderService";

// ✅ CONSTANTS - Moved outside component to avoid recreation
const DOCUMENT_LABELS = {
  documentName: "Purchase Order",
  documentNamePlural: "Purchase Orders",
  listPath: "purchase-orders",
  editPath: "purchase-orders",
  createPath: "purchase-orders/new",
};

const STATUS_CONFIG = {
  cancelled: {variant: "dark", text: "Cancelled", icon: faTimesCircle},
  deleted: {variant: "dark", text: "Cancelled", icon: faTimesCircle},
  draft: {variant: "secondary", text: "Draft", icon: faEdit},
  pending: {variant: "warning", text: "Pending", icon: faClock},
  confirmed: {variant: "primary", text: "Confirmed", icon: faCheckCircle},
  shipped: {variant: "info", text: "Shipped", icon: faTruck},
  delivered: {variant: "success", text: "Received", icon: faBoxes},
  received: {variant: "success", text: "Received", icon: faBoxes},
  completed: {variant: "success", text: "Completed", icon: faCheck},
  default: {variant: "secondary", text: "Unknown", icon: faClipboardList},
};

function PurchaseOrderTable({
  purchaseOrders: propPurchaseOrders = [],
  onViewOrder,
  onEditOrder,
  onDeleteOrder,
  onPrintOrder,
  onShareOrder,
  onDownloadOrder,
  onConvertOrder,
  onConfirmOrder,
  onShipOrder,
  onReceiveOrder,
  onCompleteOrder,
  onCancelOrder,
  onDuplicateOrder,
  isLoading: propIsLoading = false,
  title,
  searchPlaceholder,
  companyId,
  addToast,
  currentUser,
  currentCompany,
  searchTerm = "",
  onSearchChange,
  sortBy = "date",
  sortOrder = "desc",
  onSort,
  filterStatus = "all",
  onFilterChange,
  showHeader = true,
  enableActions = true,
  enableBulkActions = false,
  selectedOrders = [],
  onSelectionChange,
  showBidirectionalColumns = true, // ✅ Enable by default
  onViewTrackingChain,
  onGenerateSalesOrder,
  onViewSourceOrder,
  onViewGeneratedOrders,
  refreshTrigger, // ✅ ADD: For external refresh triggers
}) {
  const navigate = useNavigate();
  const location = useLocation();

  // ✅ ENHANCED STATE MANAGEMENT
  const [purchaseOrders, setPurchaseOrders] = useState(propPurchaseOrders);
  const [isLoading, setIsLoading] = useState(propIsLoading);
  const [fetchError, setFetchError] = useState(null);
  const [lastFetchTime, setLastFetchTime] = useState(null);

  // ✅ STATE MANAGEMENT
  const [viewModalShow, setViewModalShow] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [modalLoading, setModalLoading] = useState(false);
  const [modalError, setModalError] = useState(null);
  const [activeOrderType, setActiveOrderType] = useState("all");
  const [deletingOrders, setDeletingOrders] = useState(new Set());
  const [localSearchTerm, setLocalSearchTerm] = useState(searchTerm);
  const [localSortBy, setLocalSortBy] = useState(sortBy);
  const [localSortOrder, setLocalSortOrder] = useState(sortOrder);
  const [localFilterStatus, setLocalFilterStatus] = useState(filterStatus);
  const [showGenerateSalesModal, setShowGenerateSalesModal] = useState(false);
  const [selectedOrderForGeneration, setSelectedOrderForGeneration] =
    useState(null);

  // ✅ UTILITY FUNCTIONS
  const getDocumentType = () => "purchase-order";

  const getOrderSource = useCallback(
    (order) => {
      // ✅ ENHANCED: Better logic for purchase order source detection

      // Check if this is an auto-generated order from sales order/quotation
      if (
        order.isAutoGenerated === true ||
        order.sourceOrderId ||
        order.sourceOrderNumber ||
        order.sourceOrderType === "quotation" ||
        order.sourceOrderType === "sales-order" ||
        order.generatedFrom === "sales_order" ||
        order.linkedOrderType === "bidirectional"
      ) {
        // ✅ CRITICAL FIX: Auto-generated POs should be categorized as "From Supplier"
        // because they represent orders placed with supplier companies

        const sourceType =
          order.sourceOrderType === "quotation" ? "Quotation" : "Sales Order";

        return {
          type: "external", // ✅ CHANGED from "auto" to "external"
          label: "From Supplier", // ✅ CHANGED from "Auto-Generated" to "From Supplier"
          icon: faBuilding, // ✅ CHANGED from faRobot to faBuilding
          color: "warning", // ✅ CHANGED from "info" to "warning"
          description: order.sourceOrderNumber
            ? `Generated from ${sourceType}: ${order.sourceOrderNumber}`
            : `Generated from ${sourceType}`,
          // ✅ ADD: Additional metadata for better tracking
          sourceOrderType: order.sourceOrderType,
          sourceOrderId: order.sourceOrderId,
          sourceOrderNumber: order.sourceOrderNumber,
          sourceCompanyId: order.sourceCompanyId,
          isAutoGenerated: true,
        };
      }
      // Check if this is from a different company (external supplier)
      else if (order.sourceCompanyId && order.sourceCompanyId !== companyId) {
        return {
          type: "external",
          label: "From Supplier",
          icon: faBuilding,
          color: "warning",
          description: order.sourceCompanyName || "External Supplier",
          sourceCompanyId: order.sourceCompanyId,
        };
      }
      // Self-created orders
      else {
        return {
          type: "self",
          label: "Self Created",
          icon: faUser,
          color: "success",
          description: "Created internally",
        };
      }
    },
    [companyId]
  );

  const fetchPurchaseOrders = useCallback(
    async (force = false) => {
      if (!companyId) return;

      // Skip if data is fresh and not forced
      if (!force && lastFetchTime && Date.now() - lastFetchTime < 30000) {
        return;
      }

      try {
        setIsLoading(true);
        setFetchError(null);

        console.log("🔄 Fetching purchase orders with bidirectional data...");

        // ✅ FIXED: Use getPurchaseOrders instead of getAllPurchaseOrders
        const response = await purchaseOrderService.getPurchaseOrders(
          companyId,
          {
            includeBidirectional: true,
            includeSourceOrders: true,
            includeGeneratedOrders: true,
            includeTrackingChain: true,
            populateSupplier: true,
            populateItems: true,
            sortBy: sortBy,
            sortOrder: sortOrder,
            status: filterStatus !== "all" ? filterStatus : undefined,
            search: searchTerm || undefined,
          }
        );

        if (response.success && response.data) {
          const orders =
            response.data.purchaseOrders ||
            response.data.orders ||
            response.data.data ||
            response.data;

          console.log("✅ Purchase orders fetched:", {
            total: orders.length,
            withSourceOrders: orders.filter((o) => o.sourceOrderId).length,
            autoGenerated: orders.filter((o) => o.isAutoGenerated).length,
            withCorrespondingSO: orders.filter(
              (o) => o.hasCorrespondingSalesOrder
            ).length,
          });

          // ✅ ENHANCED: Process orders with bidirectional data
          const processedOrders = orders.map((order) => ({
            ...order,
            // ✅ Enhanced source tracking
            hasSourceOrder: !!(order.sourceOrderId || order.sourceOrderNumber),
            sourceOrderType:
              order.sourceOrderType ||
              (order.generatedFrom === "sales_order" ? "sales-order" : null),
            sourceOrderDisplay: order.sourceOrderNumber || order.sourceOrderId,

            // ✅ Enhanced generation tracking
            hasGeneratedSalesOrder: !!(
              order.salesOrderRef ||
              order.autoGeneratedSalesOrder ||
              order.hasGeneratedSalesOrder ||
              order.correspondingSalesOrderId
            ),

            // ✅ Enhanced bidirectional status
            isBidirectional: !!(
              order.isAutoGenerated ||
              order.sourceOrderId ||
              order.hasCorrespondingSalesOrder ||
              order.linkedOrderType === "bidirectional"
            ),

            // ✅ Enhanced display data
            displaySupplierName:
              order.supplierName ||
              order.supplier?.name ||
              order.partyName ||
              "Unknown Supplier",
            displayAmount: parseFloat(
              order.amount || order.total || order.totals?.finalTotal || 0
            ),
            displayStatus: order.status || "draft",
            displayDate:
              order.orderDate ||
              order.purchaseDate ||
              order.date ||
              order.createdAt,
          }));

          setPurchaseOrders(processedOrders);
          setLastFetchTime(Date.now());

          // ✅ Call parent callback if provided
          if (typeof propPurchaseOrders === "function") {
            propPurchaseOrders(processedOrders);
          }
        } else {
          throw new Error(
            response.message || "Failed to fetch purchase orders"
          );
        }
      } catch (error) {
        console.error("❌ Error fetching purchase orders:", error);
        setFetchError(error.message);
        addToast?.(
          `Failed to fetch purchase orders: ${error.message}`,
          "error"
        );

        // ✅ Fallback to provided data
        if (propPurchaseOrders.length > 0) {
          setPurchaseOrders(propPurchaseOrders);
        }
      } finally {
        setIsLoading(false);
      }
    },
    [
      companyId,
      sortBy,
      sortOrder,
      filterStatus,
      searchTerm,
      propPurchaseOrders,
      addToast,
      lastFetchTime,
    ]
  );

  // ✅ ENHANCED: Auto-fetch on mount and dependency changes
  useEffect(() => {
    if (companyId) {
      fetchPurchaseOrders(true);
    }
  }, [companyId, refreshTrigger]);

  // ✅ ENHANCED: Refresh when filters change
  useEffect(() => {
    if (companyId && lastFetchTime) {
      const delayedFetch = setTimeout(() => {
        fetchPurchaseOrders(false);
      }, 500); // Debounce filter changes

      return () => clearTimeout(delayedFetch);
    }
  }, [searchTerm, filterStatus, sortBy, sortOrder, fetchPurchaseOrders]);

  const finalPurchaseOrders = useMemo(() => {
    const orders =
      Array.isArray(purchaseOrders) && purchaseOrders.length > 0
        ? purchaseOrders
        : Array.isArray(propPurchaseOrders)
        ? propPurchaseOrders
        : [];

    return orders.filter((order) => order != null); // Remove null/undefined orders
  }, [purchaseOrders, propPurchaseOrders]);

  const finalIsLoading = isLoading || propIsLoading;

  // ✅ ENHANCED: Generated orders detection
  const getGeneratedOrdersInfo = useCallback((order) => {
    const info = {
      hasGeneratedSO: false,
      hasCorrespondingSO: false,
      salesOrderNumber: null,
      correspondingSalesOrderId: null,
      canGenerateSO: false,
    };

    // ✅ Check for generated sales orders
    if (
      order.autoGeneratedSalesOrder === true ||
      order.salesOrderRef ||
      order.hasGeneratedSalesOrder
    ) {
      info.hasGeneratedSO = true;
      info.salesOrderNumber = order.salesOrderNumber;
    }

    // ✅ Check for corresponding sales orders
    if (order.correspondingSalesOrderId || order.hasCorrespondingSalesOrder) {
      info.hasCorrespondingSO = true;
      info.correspondingSalesOrderId = order.correspondingSalesOrderId;
    }

    // ✅ Determine if can generate SO
    info.canGenerateSO =
      !info.hasGeneratedSO &&
      !info.hasCorrespondingSO &&
      order.status !== "cancelled" &&
      order.status !== "deleted";

    return info;
  }, []);

  const categorizeOrders = useMemo(() => {
    const all = Array.isArray(finalPurchaseOrders) ? finalPurchaseOrders : [];
    const selfCreated = [];
    const fromSuppliers = [];

    all.forEach((order) => {
      if (!order) return; // Skip null/undefined orders

      const source = getOrderSource(order);
      if (source.type === "external") {
        fromSuppliers.push(order);
      } else {
        selfCreated.push(order);
      }
    });

    return {
      all,
      selfCreated,
      fromSuppliers,
    };
  }, [finalPurchaseOrders, getOrderSource]);

  const getFilteredOrders = () => {
    // ✅ FIXED: Start with finalPurchaseOrders instead of empty array
    let orders = [...finalPurchaseOrders]; // Always start with all orders

    // ✅ KEEP: Search filter
    if (localSearchTerm && localSearchTerm.trim()) {
      const searchLower = localSearchTerm.toLowerCase();
      orders = orders.filter(
        (order) =>
          (order.orderNumber || "").toLowerCase().includes(searchLower) ||
          (order.supplierName || order.supplier?.name || "")
            .toLowerCase()
            .includes(searchLower) ||
          (order.supplierMobile || order.supplier?.mobile || "")
            .toLowerCase()
            .includes(searchLower) ||
          (order.notes || "").toLowerCase().includes(searchLower)
      );
    }

    // ✅ KEEP: Status filter
    if (
      localFilterStatus &&
      localFilterStatus !== "all" &&
      localFilterStatus !== ""
    ) {
      orders = orders.filter((order) => order.status === localFilterStatus);
    }

    // ✅ KEEP: Sorting logic
    if (orders.length > 0) {
      orders.sort((a, b) => {
        let aVal, bVal;

        switch (localSortBy) {
          case "date":
            aVal = new Date(a.orderDate || a.date || a.createdAt || 0);
            bVal = new Date(b.orderDate || b.date || b.createdAt || 0);
            if (isNaN(aVal.getTime())) aVal = new Date(0);
            if (isNaN(bVal.getTime())) bVal = new Date(0);
            break;
          case "amount":
            aVal = parseFloat(a.amount || a.total || a.totals?.finalTotal || 0);
            bVal = parseFloat(b.amount || b.total || b.totals?.finalTotal || 0);
            if (isNaN(aVal)) aVal = 0;
            if (isNaN(bVal)) bVal = 0;
            break;
          case "supplier":
            aVal = (a.supplierName || a.supplier?.name || "").toLowerCase();
            bVal = (b.supplierName || b.supplier?.name || "").toLowerCase();
            break;
          default:
            aVal = a.orderNumber || "";
            bVal = b.orderNumber || "";
        }

        try {
          if (localSortOrder === "desc") {
            return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;
          } else {
            return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
          }
        } catch (error) {
          console.warn("Sorting error:", error);
          return 0;
        }
      });
    }

    return orders;
  };

  // ✅ FIX: Add safe fallback for filteredOrders
  const filteredOrders = useMemo(() => {
    try {
      return getFilteredOrders();
    } catch (error) {
      console.error("Error filtering orders:", error);
      return []; // Safe fallback
    }
  }, [
    localSearchTerm,
    localFilterStatus,
    localSortBy,
    localSortOrder,
    finalPurchaseOrders,
  ]);

  // ✅ ORDER TRANSFORMATION FOR EDIT
  const transformOrderForEdit = useCallback(
    (order) => {
      const transformedItems = (order.items || []).map((item, index) => {
        const quantity = parseFloat(item.quantity || item.qty || 1);
        const pricePerUnit = parseFloat(
          item.pricePerUnit ||
            item.unitPrice ||
            item.rate ||
            item.price ||
            item.purchasePrice ||
            item.costPrice ||
            0
        );
        const taxRate = parseFloat(item.taxRate || item.gstRate || 18);

        const subtotal = quantity * pricePerUnit;
        const discountAmount = parseFloat(item.discountAmount || 0);
        const taxableAmount = subtotal - discountAmount;
        const taxAmount = (taxableAmount * taxRate) / 100;
        const cgstAmount = taxAmount / 2;
        const sgstAmount = taxAmount / 2;
        const totalAmount = taxableAmount + taxAmount;

        return {
          id: item.id || item._id || `item-${index}-${Date.now()}`,
          _id: item.id || item._id,
          itemRef: item.itemRef || item.productId || item.id,
          itemName: item.itemName || item.productName || item.name || "",
          itemCode: item.itemCode || item.productCode || item.code || "",
          hsnCode: item.hsnCode || item.hsnNumber || "0000",
          quantity: quantity,
          unit: item.unit || "PCS",
          pricePerUnit: pricePerUnit,
          taxRate: taxRate,
          discountPercent: parseFloat(item.discountPercent || 0),
          discountAmount: discountAmount,
          taxableAmount: taxableAmount,
          cgstAmount: cgstAmount,
          sgstAmount: sgstAmount,
          igst: parseFloat(item.igst || 0),
          amount: totalAmount,
          category: item.category || "",
          currentStock: parseFloat(item.currentStock || 0),
          taxMode: item.taxMode || order.taxMode || "without-tax",
          priceIncludesTax: Boolean(
            item.priceIncludesTax || order.priceIncludesTax
          ),
          selectedProduct: item.itemRef
            ? {
                id: item.itemRef,
                _id: item.itemRef,
                name: item.itemName || item.productName,
                purchasePrice: pricePerUnit,
                gstRate: taxRate,
                hsnCode: item.hsnCode || "0000",
                unit: item.unit || "PCS",
              }
            : null,
        };
      });

      const supplierData =
        order.supplier && typeof order.supplier === "object"
          ? {
              id: order.supplier._id || order.supplier.id,
              _id: order.supplier._id || order.supplier.id,
              name: order.supplier.name || order.supplier.supplierName || "",
              mobile: order.supplier.mobile || order.supplier.phone || "",
              email: order.supplier.email || "",
              address: order.supplier.address || "",
              gstNumber: order.supplier.gstNumber || "",
            }
          : {
              id: order.supplierId || order.supplier,
              _id: order.supplierId || order.supplier,
              name: order.supplierName || order.partyName || "",
              mobile:
                order.supplierMobile ||
                order.partyPhone ||
                order.mobileNumber ||
                "",
              email: order.supplierEmail || order.partyEmail || "",
              address: order.supplierAddress || order.partyAddress || "",
              gstNumber: order.supplierGstNumber || "",
            };

      const totalAmount = parseFloat(
        order.amount ||
          order.total ||
          order.totals?.finalTotal ||
          order.grandTotal ||
          order.orderValue ||
          0
      );

      return {
        id: order._id || order.id,
        _id: order._id || order.id,
        documentType: "purchase-order",
        orderNumber:
          order.orderNumber ||
          order.purchaseOrderNumber ||
          order.purchaseNumber ||
          order.billNumber,
        orderDate:
          order.orderDate || order.purchaseDate || order.billDate || order.date,
        expectedDeliveryDate:
          order.expectedDeliveryDate || order.deliveryDate || null,
        supplier: supplierData,
        supplierName: supplierData?.name || "",
        supplierMobile: supplierData?.mobile || "",
        items: transformedItems,
        amount: totalAmount,
        status: order.status || "draft",
        priority: order.priority || "normal",
        notes: order.notes || order.description || "",
        terms: order.terms || order.termsAndConditions || "",
        gstEnabled: order.gstEnabled !== undefined ? order.gstEnabled : true,
        taxMode: order.taxMode || "without-tax",
        priceIncludesTax: Boolean(order.priceIncludesTax),
        companyId: order.companyId || companyId,
        isAutoGenerated: Boolean(order.isAutoGenerated),
        sourceOrderType: order.sourceOrderType || null,
        sourceOrderId: order.sourceOrderId || null,
        sourceOrderNumber: order.sourceOrderNumber || null,
        sourceCompanyId: order.sourceCompanyId || null,
        hasCorrespondingSalesOrder: Boolean(order.hasCorrespondingSalesOrder),
        correspondingSalesOrderId: order.correspondingSalesOrderId || null,
        hasGeneratedSalesOrder: Boolean(order.hasGeneratedSalesOrder),
        trackingInfo: order.trackingInfo || null,
        isTransformed: true,
      };
    },
    [companyId]
  );

  // ✅ ACTION HANDLERS
  const handleAction = useCallback(
    async (action, order, ...args) => {
      const targetOrder = order || selectedOrder;
      if (!targetOrder) return;

      const orderId = targetOrder._id || targetOrder.id;

      try {
        switch (action) {
          case "view":
            setModalLoading(true);
            setModalError(null);
            const transformedOrder = transformOrderForEdit(targetOrder);
            const enhancedOrder = {
              ...transformedOrder,
              displayNumber: transformedOrder.orderNumber || "N/A",
              displayDate: new Date(
                transformedOrder.orderDate
              ).toLocaleDateString("en-GB"),
              displaySupplier:
                transformedOrder.supplierName || "Unknown Supplier",
              displayAmount: `₹${transformedOrder.amount.toLocaleString(
                "en-IN"
              )}`,
              displayStatus: transformedOrder.status || "draft",
              displayPriority: transformedOrder.priority || "normal",
              displayExpectedDelivery: transformedOrder.expectedDeliveryDate
                ? new Date(
                    transformedOrder.expectedDeliveryDate
                  ).toLocaleDateString("en-GB")
                : "Not set",
            };
            setSelectedOrder(enhancedOrder);
            setViewModalShow(true);
            setModalLoading(false);
            onViewOrder?.(targetOrder);
            break;

          case "edit":
            if (
              targetOrder.status === "cancelled" ||
              targetOrder.status === "deleted"
            ) {
              addToast?.("Cannot edit cancelled purchase order", "warning");
              return;
            }
            const editTransformed = transformOrderForEdit(targetOrder);
            const editPath = `/companies/${companyId}/${DOCUMENT_LABELS.editPath}/${orderId}/edit`;
            navigate(editPath, {
              state: {
                purchaseOrder: editTransformed,
                order: editTransformed,
                transaction: editTransformed,
                documentType: "purchase-order",
                mode: "purchase-orders",
                returnPath: location.pathname,
                editMode: true,
              },
            });
            if (viewModalShow) {
              setViewModalShow(false);
              setSelectedOrder(null);
            }
            onEditOrder?.(targetOrder);
            break;

          case "delete":
            if (
              deletingOrders.has(orderId) ||
              targetOrder.status === "cancelled"
            ) {
              return;
            }

            setDeletingOrders((prev) => new Set(prev).add(orderId));
            setModalLoading(true);

            const orderNumber =
              targetOrder.orderNumber || "this purchase order";
            const confirmed = window.confirm(
              `Are you sure you want to delete purchase order ${orderNumber}?`
            );

            if (!confirmed) {
              setModalLoading(false);
              setDeletingOrders((prev) => {
                const newSet = new Set(prev);
                newSet.delete(orderId);
                return newSet;
              });
              return;
            }

            const deleteOptions = {
              hard: targetOrder.status === "draft",
              reason: "Deleted by user",
            };

            const deleteResponse =
              await purchaseOrderService.deletePurchaseOrder(
                orderId,
                deleteOptions
              );

            if (deleteResponse.success) {
              addToast?.(
                deleteResponse.message || "Purchase order deleted successfully",
                "success"
              );
              if (viewModalShow) {
                setViewModalShow(false);
                setSelectedOrder(null);
              }
              onDeleteOrder?.(targetOrder);
            } else {
              throw new Error(
                deleteResponse.message || "Failed to delete purchase order"
              );
            }
            break;

          case "duplicate":
            const duplicateTransformed = transformOrderForEdit(targetOrder);
            const duplicateData = {
              ...duplicateTransformed,
              id: undefined,
              _id: undefined,
              orderNumber: undefined,
              status: "draft",
              orderDate: new Date().toISOString(),
              isAutoGenerated: false,
              sourceOrderType: null,
              sourceOrderId: null,
              sourceOrderNumber: null,
              hasCorrespondingSalesOrder: false,
              hasGeneratedSalesOrder: false,
            };
            const createPath = `/companies/${companyId}/${DOCUMENT_LABELS.createPath}`;
            navigate(createPath, {
              state: {
                duplicateData: duplicateData,
                isDuplicate: true,
                originalOrder: targetOrder,
                returnPath: location.pathname,
              },
            });
            if (viewModalShow) {
              setViewModalShow(false);
              setSelectedOrder(null);
            }
            onDuplicateOrder?.(targetOrder);
            break;

          case "print":
            onPrintOrder?.(targetOrder);
            break;

          case "share":
            onShareOrder?.(targetOrder);
            break;

          case "download":
            onDownloadOrder?.(targetOrder);
            break;

          case "convert":
            onConvertOrder?.(targetOrder);
            break;

          case "confirm":
            onConfirmOrder?.(targetOrder);
            break;

          case "ship":
            onShipOrder?.(targetOrder);
            break;

          case "receive":
            onReceiveOrder?.(targetOrder);
            break;

          case "complete":
            onCompleteOrder?.(targetOrder);
            break;

          case "cancel":
            onCancelOrder?.(targetOrder);
            break;

          case "generateSalesOrder":
            if (onGenerateSalesOrder) {
              onGenerateSalesOrder(targetOrder);
            }
            break;

          case "viewTrackingChain":
            if (onViewTrackingChain) {
              onViewTrackingChain(targetOrder);
            } else {
              const response = await purchaseOrderService.getTrackingChain(
                orderId
              );
              if (response.success) {
                addToast?.("Tracking chain loaded successfully", "success");
              }
            }
            break;

          case "viewSourceOrder":
            if (onViewSourceOrder) {
              onViewSourceOrder(targetOrder);
            } else if (
              targetOrder.sourceOrderId &&
              targetOrder.sourceOrderType === "sales_order"
            ) {
              navigate(
                `/companies/${companyId}/sales-orders/${targetOrder.sourceOrderId}`
              );
            }
            break;

          case "viewGeneratedOrders":
            if (onViewGeneratedOrders) {
              onViewGeneratedOrders(targetOrder);
            } else {
              const response = await purchaseOrderService.getGeneratedOrders(
                orderId
              );
              if (response.success) {
                addToast?.("Generated orders loaded successfully", "success");
              }
            }
            break;

          default:
            console.warn("Unknown action:", action);
        }
      } catch (error) {
        console.error(`❌ Error handling action ${action}:`, error);
        addToast?.(
          error.message || `Failed to ${action} purchase order`,
          "error"
        );
      } finally {
        if (action === "delete") {
          setModalLoading(false);
          setDeletingOrders((prev) => {
            const newSet = new Set(prev);
            newSet.delete(orderId);
            return newSet;
          });
        }
      }
    },
    [
      selectedOrder,
      companyId,
      location.pathname,
      navigate,
      viewModalShow,
      deletingOrders,
      transformOrderForEdit,
      onViewOrder,
      onEditOrder,
      onDeleteOrder,
      onDuplicateOrder,
      onPrintOrder,
      onShareOrder,
      onDownloadOrder,
      onConvertOrder,
      onConfirmOrder,
      onShipOrder,
      onReceiveOrder,
      onCompleteOrder,
      onCancelOrder,
      onGenerateSalesOrder,
      onViewTrackingChain,
      onViewSourceOrder,
      onViewGeneratedOrders,
      addToast,
    ]
  );

  // ✅ SIMPLIFIED HANDLERS
  const handleViewOrder = useCallback(
    (order) => handleAction("view", order),
    [handleAction]
  );
  const handleEditOrder = useCallback(
    (order) => handleAction("edit", order),
    [handleAction]
  );
  const handleDeleteOrder = useCallback(
    (order) => handleAction("delete", order),
    [handleAction]
  );
  const handleDuplicateOrder = useCallback(
    (order) => handleAction("duplicate", order),
    [handleAction]
  );
  const handlePrintOrder = useCallback(
    (order) => handleAction("print", order),
    [handleAction]
  );
  const handleShareOrder = useCallback(
    (order) => handleAction("share", order),
    [handleAction]
  );
  const handleDownloadOrder = useCallback(
    (order) => handleAction("download", order),
    [handleAction]
  );
  const handleConvertOrder = useCallback(
    (order) => handleAction("convert", order),
    [handleAction]
  );
  const handleConfirmOrder = useCallback(
    (order) => handleAction("confirm", order),
    [handleAction]
  );
  const handleShipOrder = useCallback(
    (order) => handleAction("ship", order),
    [handleAction]
  );
  const handleReceiveOrder = useCallback(
    (order) => handleAction("receive", order),
    [handleAction]
  );
  const handleCompleteOrder = useCallback(
    (order) => handleAction("complete", order),
    [handleAction]
  );
  const handleCancelOrder = useCallback(
    (order) => handleAction("cancel", order),
    [handleAction]
  );
  const handleGenerateSalesOrder = useCallback(
    (order) => handleAction("generateSalesOrder", order),
    [handleAction]
  );
  const handleViewTrackingChain = useCallback(
    (order) => handleAction("viewTrackingChain", order),
    [handleAction]
  );
  const handleViewSourceOrder = useCallback(
    (order) => handleAction("viewSourceOrder", order),
    [handleAction]
  );
  const handleViewGeneratedOrders = useCallback(
    (order) => handleAction("viewGeneratedOrders", order),
    [handleAction]
  );

  const separatedOrders = useMemo(() => {
    const active = [];
    const cancelled = [];

    if (Array.isArray(filteredOrders)) {
      filteredOrders.forEach((order) => {
        if (!order) return; // Skip null/undefined orders

        if (order.status === "cancelled" || order.status === "deleted") {
          cancelled.push(order);
        } else {
          active.push(order);
        }
      });
    }

    return {active, cancelled};
  }, [filteredOrders]);

  const StatusBadge = ({status, priority}) => {
    const statusInfo = STATUS_CONFIG[status] || STATUS_CONFIG.default;

    return (
      <div className="d-flex flex-column align-items-start gap-1">
        <Badge bg={statusInfo.variant} className="d-flex align-items-center">
          <FontAwesomeIcon icon={statusInfo.icon} className="me-1" />
          {statusInfo.text}
        </Badge>
        {priority && priority !== "normal" && (
          <Badge
            bg={
              priority === "high"
                ? "danger"
                : priority === "urgent"
                ? "warning"
                : "info"
            }
            className="small"
          >
            {priority.toUpperCase()}
          </Badge>
        )}
      </div>
    );
  };

  const SourceBadge = ({order}) => {
    const source = getOrderSource(order);

    return (
      <div className="d-flex flex-column align-items-start gap-1">
        <Badge bg={source.color} className="d-flex align-items-center">
          <FontAwesomeIcon icon={source.icon} className="me-1" />
          {source.label}
        </Badge>
        {source.description && (
          <small
            className="text-muted"
            title={source.description}
            style={{fontSize: "0.7rem", lineHeight: "1.2"}}
          >
            {source.description.length > 25
              ? `${source.description.substring(0, 25)}...`
              : source.description}
          </small>
        )}
        {/* ✅ ADD: Source order link */}
        {source.sourceOrderId && source.sourceOrderNumber && (
          <Button
            variant="link"
            size="sm"
            className="p-0 text-decoration-none"
            style={{fontSize: "0.7rem"}}
            onClick={(e) => {
              e.stopPropagation();
              handleViewSourceOrder(order);
            }}
          >
            <FontAwesomeIcon icon={faEye} className="me-1" />
            View Source
          </Button>
        )}
      </div>
    );
  };

  // ✅ ENHANCED: Generated Orders Badge Component
  const GeneratedOrdersBadge = ({order}) => {
    const genInfo = getGeneratedOrdersInfo(order);

    if (
      !genInfo.hasGeneratedSO &&
      !genInfo.hasCorrespondingSO &&
      !genInfo.canGenerateSO
    ) {
      return <small className="text-muted">None</small>;
    }

    return (
      <div className="generated-orders-info">
        {genInfo.hasCorrespondingSO && (
          <Badge bg="success" className="me-1 mb-1">
            <FontAwesomeIcon icon={faExchangeAlt} className="me-1" />
            Linked SO
          </Badge>
        )}
        {genInfo.hasGeneratedSO && (
          <Badge bg="primary" className="me-1 mb-1">
            <FontAwesomeIcon icon={faArrowRight} className="me-1" />
            Generated SO
          </Badge>
        )}
        {genInfo.canGenerateSO && (
          <Button
            variant="outline-info"
            size="sm"
            className="p-1"
            style={{fontSize: "0.7rem"}}
            onClick={(e) => {
              e.stopPropagation();
              handleGenerateSalesOrder(order);
            }}
          >
            <FontAwesomeIcon icon={faPlus} className="me-1" />
            Generate SO
          </Button>
        )}
        {genInfo.salesOrderNumber && (
          <small className="text-muted d-block">
            {genInfo.salesOrderNumber}
          </small>
        )}
      </div>
    );
  };

  const ActionButton = ({order}) => {
    const orderId = order._id || order.id;
    const isDeleting = deletingOrders.has(orderId);
    const isCancelled =
      order.status === "cancelled" || order.status === "deleted";
    const status = order.status || "draft";

    return (
      <Dropdown>
        <Dropdown.Toggle
          variant="outline-secondary"
          size="sm"
          className={`border-0 ${isCancelled ? "opacity-50" : ""}`}
          disabled={isDeleting || modalLoading}
        >
          <FontAwesomeIcon icon={faEllipsisV} />
        </Dropdown.Toggle>

        <Dropdown.Menu align="end">
          <Dropdown.Item onClick={() => handleViewOrder(order)}>
            <FontAwesomeIcon icon={faEye} className="me-2" />
            View Details
          </Dropdown.Item>

          {enableActions && !isCancelled && (
            <>
              <Dropdown.Item onClick={() => handleEditOrder(order)}>
                <FontAwesomeIcon icon={faEdit} className="me-2" />
                Edit Order
              </Dropdown.Item>
              <Dropdown.Item onClick={() => handleDuplicateOrder(order)}>
                <FontAwesomeIcon icon={faCopy} className="me-2" />
                Duplicate
              </Dropdown.Item>
              <Dropdown.Divider />
            </>
          )}

          <Dropdown.Item onClick={() => handlePrintOrder(order)}>
            <FontAwesomeIcon icon={faPrint} className="me-2" />
            Print
          </Dropdown.Item>
          <Dropdown.Item onClick={() => handleShareOrder(order)}>
            <FontAwesomeIcon icon={faShare} className="me-2" />
            Share
          </Dropdown.Item>
          <Dropdown.Item onClick={() => handleDownloadOrder(order)}>
            <FontAwesomeIcon icon={faDownload} className="me-2" />
            Download
          </Dropdown.Item>

          {enableActions && !isCancelled && (
            <>
              <Dropdown.Divider />
              <Dropdown.Header>Order Actions</Dropdown.Header>

              {status === "draft" && (
                <Dropdown.Item onClick={() => handleConfirmOrder(order)}>
                  <FontAwesomeIcon icon={faCheckCircle} className="me-2" />
                  Confirm Order
                </Dropdown.Item>
              )}
              {(status === "pending" || status === "confirmed") && (
                <Dropdown.Item onClick={() => handleShipOrder(order)}>
                  <FontAwesomeIcon icon={faTruck} className="me-2" />
                  Mark as Shipped
                </Dropdown.Item>
              )}
              {status === "shipped" && (
                <Dropdown.Item onClick={() => handleReceiveOrder(order)}>
                  <FontAwesomeIcon icon={faBoxes} className="me-2" />
                  Mark as Received
                </Dropdown.Item>
              )}
              {(status === "delivered" || status === "received") && (
                <Dropdown.Item onClick={() => handleCompleteOrder(order)}>
                  <FontAwesomeIcon icon={faCheck} className="me-2" />
                  Complete Order
                </Dropdown.Item>
              )}
              <Dropdown.Item onClick={() => handleConvertOrder(order)}>
                <FontAwesomeIcon icon={faFileInvoice} className="me-2" />
                Convert to Invoice
              </Dropdown.Item>
              {status !== "completed" && (
                <Dropdown.Item
                  onClick={() => handleCancelOrder(order)}
                  className="text-warning"
                >
                  <FontAwesomeIcon icon={faTimesCircle} className="me-2" />
                  Cancel Order
                </Dropdown.Item>
              )}

              <Dropdown.Divider />
              <Dropdown.Header>Bidirectional Actions</Dropdown.Header>

              {!order.hasCorrespondingSalesOrder &&
                !order.hasGeneratedSalesOrder && (
                  <Dropdown.Item
                    onClick={() => handleGenerateSalesOrder(order)}
                  >
                    <FontAwesomeIcon icon={faExchangeAlt} className="me-2" />
                    Generate Sales Order
                  </Dropdown.Item>
                )}
              {order.isAutoGenerated && order.sourceOrderNumber && (
                <Dropdown.Item onClick={() => handleViewSourceOrder(order)}>
                  <FontAwesomeIcon icon={faEye} className="me-2" />
                  View Source: {order.sourceOrderNumber}
                </Dropdown.Item>
              )}
              {(order.hasCorrespondingSalesOrder ||
                order.hasGeneratedSalesOrder) && (
                <Dropdown.Item onClick={() => handleViewGeneratedOrders(order)}>
                  <FontAwesomeIcon icon={faProjectDiagram} className="me-2" />
                  View Generated Orders
                </Dropdown.Item>
              )}
              <Dropdown.Item onClick={() => handleViewTrackingChain(order)}>
                <FontAwesomeIcon icon={faProjectDiagram} className="me-2" />
                View Tracking Chain
              </Dropdown.Item>

              <Dropdown.Divider />
              <Dropdown.Item
                onClick={() => handleDeleteOrder(order)}
                className="text-danger"
                disabled={isDeleting}
              >
                <FontAwesomeIcon
                  icon={isDeleting ? faSpinner : faTrash}
                  className={`me-2 ${isDeleting ? "fa-spin" : ""}`}
                />
                {isDeleting ? "Deleting..." : "Delete"}
              </Dropdown.Item>
            </>
          )}
        </Dropdown.Menu>
      </Dropdown>
    );
  };

  const SimpleViewModal = ({show, onHide, order}) => {
    if (!order) return null;

    const formatCurrency = (amount) => {
      const numAmount = parseFloat(amount) || 0;
      return `₹${numAmount.toLocaleString("en-IN")}`;
    };

    const formatDate = (dateString) => {
      if (!dateString) return "Not set";
      return new Date(dateString).toLocaleDateString("en-GB");
    };

    return (
      <Modal show={show} onHide={onHide} size="lg" centered>
        <Modal.Header closeButton className="bg-primary text-white">
          <Modal.Title>
            <FontAwesomeIcon icon={faClipboardList} className="me-2" />
            Purchase Order Details
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {modalError && (
            <Alert variant="danger" className="mb-3">
              <FontAwesomeIcon icon={faExclamationTriangle} className="me-2" />
              {modalError}
            </Alert>
          )}

          {modalLoading ? (
            <div className="text-center py-4">
              <Spinner animation="border" variant="primary" />
              <p className="mt-2 text-muted">Loading order details...</p>
            </div>
          ) : (
            <Row>
              <Col md={6}>
                <div className="mb-3">
                  <strong>Order Number:</strong>
                  <div className="text-primary">
                    {order.orderNumber || "N/A"}
                  </div>
                </div>
                <div className="mb-3">
                  <strong>Order Date:</strong>
                  <div>{formatDate(order.orderDate)}</div>
                </div>
                <div className="mb-3">
                  <strong>Supplier:</strong>
                  <div>{order.supplierName || "Unknown"}</div>
                  {order.supplierMobile && (
                    <small className="text-muted">{order.supplierMobile}</small>
                  )}
                </div>
                <div className="mb-3">
                  <strong>Status:</strong>
                  <div>
                    <StatusBadge
                      status={order.status}
                      priority={order.priority}
                    />
                  </div>
                </div>
                <div className="mb-3">
                  <strong>Source:</strong>
                  <div className="mt-1">
                    <SourceBadge order={order} />
                  </div>
                </div>
              </Col>
              <Col md={6}>
                <div className="mb-3">
                  <strong>Order Value:</strong>
                  <div className="h5 text-success">
                    {formatCurrency(order.amount || 0)}
                  </div>
                </div>
                <div className="mb-3">
                  <strong>Expected Delivery:</strong>
                  <div>{formatDate(order.expectedDeliveryDate)}</div>
                </div>
                <div className="mb-3">
                  <strong>Items:</strong>
                  <div>
                    <Badge bg="info">
                      {(order.items || []).length} item
                      {(order.items || []).length !== 1 ? "s" : ""}
                    </Badge>
                  </div>
                </div>
                <div className="mb-3">
                  <strong>Generated Orders:</strong>
                  <div className="mt-1">
                    <GeneratedOrdersBadge order={order} />
                  </div>
                </div>
              </Col>
            </Row>
          )}

          {order.notes && (
            <div className="mt-3">
              <strong>Notes:</strong>
              <div className="text-muted">{order.notes}</div>
            </div>
          )}

          {order.items && order.items.length > 0 && (
            <div className="mt-4">
              <strong>Items:</strong>
              <div className="table-responsive mt-2">
                <Table size="sm" striped>
                  <thead>
                    <tr>
                      <th>Item</th>
                      <th>Quantity</th>
                      <th>Rate</th>
                      <th className="text-end">Amount</th>
                    </tr>
                  </thead>
                  <tbody>
                    {order.items.slice(0, 5).map((item, index) => (
                      <tr key={index}>
                        <td>{item.itemName || "Unknown Item"}</td>
                        <td>
                          {item.quantity || 0} {item.unit || "PCS"}
                        </td>
                        <td>{formatCurrency(item.pricePerUnit || 0)}</td>
                        <td className="text-end">
                          {formatCurrency(item.amount || 0)}
                        </td>
                      </tr>
                    ))}
                    {order.items.length > 5 && (
                      <tr>
                        <td colSpan="4" className="text-center text-muted">
                          ... and {order.items.length - 5} more items
                        </td>
                      </tr>
                    )}
                  </tbody>
                </Table>
              </div>
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <div className="d-flex justify-content-between w-100">
            <div>
              {enableActions && order.status !== "cancelled" && (
                <>
                  <Button
                    variant="outline-primary"
                    size="sm"
                    onClick={() => handleAction("edit")}
                    className="me-2"
                  >
                    <FontAwesomeIcon icon={faEdit} className="me-1" />
                    Edit
                  </Button>
                  <Button
                    variant="outline-secondary"
                    size="sm"
                    onClick={() => handleAction("duplicate")}
                    className="me-2"
                  >
                    <FontAwesomeIcon icon={faCopy} className="me-1" />
                    Duplicate
                  </Button>
                  {!order.hasCorrespondingSalesOrder &&
                    !order.hasGeneratedSalesOrder && (
                      <Button
                        variant="outline-info"
                        size="sm"
                        onClick={() => handleAction("generateSalesOrder")}
                        className="me-2"
                      >
                        <FontAwesomeIcon
                          icon={faExchangeAlt}
                          className="me-1"
                        />
                        Generate SO
                      </Button>
                    )}
                </>
              )}
              <Button
                variant="outline-info"
                size="sm"
                onClick={() => handleAction("print")}
                className="me-2"
              >
                <FontAwesomeIcon icon={faPrint} className="me-1" />
                Print
              </Button>
            </div>
            <div>
              {enableActions && order.status !== "cancelled" && (
                <Button
                  variant="outline-danger"
                  size="sm"
                  onClick={() => handleAction("delete")}
                  disabled={
                    modalLoading || deletingOrders.has(order._id || order.id)
                  }
                  className="me-2"
                >
                  <FontAwesomeIcon
                    icon={
                      deletingOrders.has(order._id || order.id)
                        ? faSpinner
                        : faTrash
                    }
                    className={`me-1 ${
                      deletingOrders.has(order._id || order.id) ? "fa-spin" : ""
                    }`}
                  />
                  {deletingOrders.has(order._id || order.id)
                    ? "Deleting..."
                    : "Delete"}
                </Button>
              )}
              <Button variant="secondary" onClick={onHide}>
                Close
              </Button>
            </div>
          </div>
        </Modal.Footer>
      </Modal>
    );
  };

  const LoadingComponent = () => (
    <div className="text-center py-5">
      <Spinner
        animation="border"
        variant="primary"
        size="lg"
        className="mb-3"
      />
      <h5 className="text-muted">Loading purchase orders...</h5>
      <p className="text-muted small">Please wait while we fetch your data</p>
    </div>
  );

  const EmptyStateComponent = () => (
    <div className="text-center py-5">
      <FontAwesomeIcon
        icon={faClipboardList}
        size="4x"
        className="text-muted mb-4"
      />
      <h4 className="text-muted mb-3">No Purchase Orders Found</h4>
      <p className="text-muted mb-4">
        Start by creating your first purchase order to track your suppliers and
        orders.
      </p>
      <Button
        variant="primary"
        onClick={() =>
          navigate(`/companies/${companyId}/${DOCUMENT_LABELS.createPath}`)
        }
      >
        <FontAwesomeIcon icon={faPlus} className="me-2" />
        Create Purchase Order
      </Button>
    </div>
  );

  // ✅ MAIN RENDER LOGIC
  if (isLoading) {
    return <LoadingComponent />;
  }

  // ✅ COMPLETE UPDATED RETURN STATEMENT with safety checks

  // Add these safety checks before the return statement
  const safeFilteredOrders = Array.isArray(filteredOrders)
    ? filteredOrders
    : [];
  const safePurchaseOrders = Array.isArray(purchaseOrders)
    ? purchaseOrders
    : [];
  const safeSeparatedOrders = separatedOrders || {active: [], cancelled: []};
  const safeCategorizeOrders = categorizeOrders || {
    all: [],
    selfCreated: [],
    fromSuppliers: [],
  };

  // ✅ MAIN RENDER LOGIC
  if (finalIsLoading) {
    return <LoadingComponent />;
  }

  if (!Array.isArray(finalPurchaseOrders) || finalPurchaseOrders.length === 0) {
    return <EmptyStateComponent />;
  }

  return (
    <>
      {showHeader && (
        <div className="purchase-orders-filter-section mb-4">
          <Container fluid className="px-0">
            <Row className="align-items-center">
              <Col>
                <h5 className="mb-0 text-purple">
                  <FontAwesomeIcon icon={faClipboardList} className="me-2" />
                  {title || "Purchase Orders"}
                  <Badge bg="light" text="dark" className="ms-2">
                    {safeFilteredOrders.length}
                  </Badge>
                </h5>
              </Col>
              <Col xs="auto">
                <div className="d-flex gap-2 align-items-center">
                  <InputGroup size="sm" style={{width: "250px"}}>
                    <InputGroup.Text>
                      <FontAwesomeIcon icon={faSearch} />
                    </InputGroup.Text>
                    <Form.Control
                      type="text"
                      placeholder={searchPlaceholder || "Search orders..."}
                      value={localSearchTerm}
                      onChange={(e) => {
                        setLocalSearchTerm(e.target.value);
                        if (onSearchChange) {
                          onSearchChange(e.target.value);
                        }
                      }}
                    />
                  </InputGroup>

                  <Form.Select
                    size="sm"
                    value={localFilterStatus}
                    onChange={(e) => {
                      setLocalFilterStatus(e.target.value);
                      if (onFilterChange) {
                        onFilterChange(e.target.value);
                      }
                    }}
                    style={{width: "150px"}}
                  >
                    <option value="all">All Status</option>
                    <option value="draft">Draft</option>
                    <option value="pending">Pending</option>
                    <option value="confirmed">Confirmed</option>
                    <option value="shipped">Shipped</option>
                    <option value="received">Received</option>
                    <option value="completed">Completed</option>
                    <option value="cancelled">Cancelled</option>
                  </Form.Select>

                  <Button variant="outline-primary" size="sm">
                    <FontAwesomeIcon icon={faFileExcel} className="me-1" />
                    Export
                  </Button>
                </div>
              </Col>
            </Row>
          </Container>
        </div>
      )}

      <div className="purchase-orders-table-wrapper">
        <div className="table-responsive-wrapper">
          <Table responsive hover className="mb-0 purchase-orders-table">
            <thead className="table-header-purple">
              <tr>
                {enableBulkActions && (
                  <th width="40" className="selection-column">
                    <Form.Check
                      type="checkbox"
                      checked={
                        Array.isArray(selectedOrders) &&
                        Array.isArray(safeFilteredOrders) &&
                        selectedOrders.length === safeFilteredOrders.length &&
                        safeFilteredOrders.length > 0
                      }
                      onChange={(e) => {
                        if (onSelectionChange) {
                          onSelectionChange(
                            e.target.checked
                              ? safeFilteredOrders.map((o) => o._id || o.id)
                              : []
                          );
                        }
                      }}
                      className="purple-checkbox"
                    />
                  </th>
                )}
                <th className="date-column">
                  <div className="d-flex align-items-center">
                    <FontAwesomeIcon icon={faClock} className="me-2" />
                    Date
                    <FontAwesomeIcon
                      icon={faSort}
                      className="ms-1 text-white-50 sort-icon"
                      onClick={() => onSort?.("date")}
                      style={{cursor: "pointer"}}
                    />
                  </div>
                </th>
                <th className="order-number-column">
                  <div className="d-flex align-items-center">
                    <FontAwesomeIcon icon={faList} className="me-2" />
                    Order No.
                  </div>
                </th>
                <th className="supplier-column">
                  <div className="d-flex align-items-center">
                    <FontAwesomeIcon icon={faBuilding} className="me-2" />
                    Supplier
                  </div>
                </th>
                <th className="items-column">
                  <div className="d-flex align-items-center">
                    <FontAwesomeIcon icon={faBoxes} className="me-2" />
                    Items
                  </div>
                </th>
                {showBidirectionalColumns && (
                  <th className="source-column">
                    <div className="d-flex align-items-center">
                      <FontAwesomeIcon icon={faRobot} className="me-2" />
                      Source
                    </div>
                  </th>
                )}
                {showBidirectionalColumns && (
                  <th className="generated-orders-column">
                    <div className="d-flex align-items-center">
                      <FontAwesomeIcon icon={faExchangeAlt} className="me-2" />
                      Generated Orders
                    </div>
                  </th>
                )}
                <th className="delivery-column">
                  <div className="d-flex align-items-center">
                    <FontAwesomeIcon icon={faTruck} className="me-2" />
                    Expected Delivery
                  </div>
                </th>
                <th className="amount-column text-end">
                  <div className="d-flex align-items-center justify-content-end">
                    <FontAwesomeIcon icon={faTags} className="me-2" />
                    Order Value
                    <FontAwesomeIcon
                      icon={faSort}
                      className="ms-1 text-white-50 sort-icon"
                      onClick={() => onSort?.("amount")}
                      style={{cursor: "pointer"}}
                    />
                  </div>
                </th>
                <th className="status-column">
                  <div className="d-flex align-items-center">
                    <FontAwesomeIcon icon={faCheckCircle} className="me-2" />
                    Status
                  </div>
                </th>
                <th className="priority-column">
                  <div className="d-flex align-items-center">
                    <FontAwesomeIcon
                      icon={faExclamationTriangle}
                      className="me-2"
                    />
                    Priority
                  </div>
                </th>
                {enableActions && (
                  <th className="actions-column text-center">
                    <FontAwesomeIcon icon={faEllipsisV} />
                  </th>
                )}
              </tr>
            </thead>

            {Array.isArray(safeFilteredOrders) &&
            safeFilteredOrders.length > 0 ? (
              <tbody>
                {safeFilteredOrders.map((order, index) => {
                  // ✅ Add safety check for each order
                  if (!order) return null;

                  const amount = parseFloat(
                    order.amount ||
                      order.total ||
                      order.totals?.finalTotal ||
                      order.orderValue ||
                      0
                  );
                  const itemsCount = Array.isArray(order.items)
                    ? order.items.length
                    : 0;
                  const orderId = order._id || order.id;
                  const isSelected = Array.isArray(selectedOrders)
                    ? selectedOrders.includes(orderId)
                    : false;
                  const isCancelled =
                    order.status === "cancelled" || order.status === "deleted";

                  return (
                    <tr
                      key={orderId || `order-${index}`}
                      className={`
                      purchase-order-row
                      ${isSelected ? "table-active-purple" : ""} 
                      ${isCancelled ? "cancelled-order-row" : ""}
                      ${index % 2 === 0 ? "even-row" : "odd-row"}
                    `}
                      onClick={() => handleViewOrder(order)}
                      style={{cursor: "pointer"}}
                    >
                      {enableBulkActions && (
                        <td
                          className="selection-cell"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <Form.Check
                            type="checkbox"
                            checked={isSelected}
                            disabled={isCancelled}
                            onChange={(e) => {
                              if (onSelectionChange && !isCancelled) {
                                const newSelection = e.target.checked
                                  ? [
                                      ...(Array.isArray(selectedOrders)
                                        ? selectedOrders
                                        : []),
                                      orderId,
                                    ]
                                  : (Array.isArray(selectedOrders)
                                      ? selectedOrders
                                      : []
                                    ).filter((id) => id !== orderId);
                                onSelectionChange(newSelection);
                              }
                            }}
                            className="row-checkbox"
                          />
                        </td>
                      )}

                      <td
                        className={`date-cell ${
                          isCancelled ? "text-muted" : ""
                        }`}
                      >
                        <div className="date-wrapper">
                          <small className="order-date">
                            {new Date(
                              order.orderDate ||
                                order.purchaseDate ||
                                order.date
                            ).toLocaleDateString("en-GB")}
                          </small>
                          <small className="order-time text-muted">
                            {new Date(
                              order.orderDate ||
                                order.purchaseDate ||
                                order.date
                            ).toLocaleTimeString("en-GB", {
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </small>
                        </div>
                      </td>

                      <td className="order-number-cell">
                        <div className="order-number-wrapper">
                          <strong
                            className={
                              isCancelled
                                ? "text-muted text-decoration-line-through"
                                : "text-primary order-number-link"
                            }
                          >
                            {order.orderNumber ||
                              order.purchaseOrderNumber ||
                              order.purchaseNumber ||
                              "N/A"}
                          </strong>
                          {isCancelled && (
                            <div className="cancellation-indicator">
                              <small className="text-muted fst-italic">
                                <FontAwesomeIcon
                                  icon={faTrash}
                                  className="me-1"
                                />
                                Cancelled
                              </small>
                            </div>
                          )}
                          {order.isAutoGenerated && (
                            <div className="auto-generated-indicator">
                              <Badge bg="info" size="sm">
                                <FontAwesomeIcon
                                  icon={faRobot}
                                  className="me-1"
                                />
                                Auto
                              </Badge>
                            </div>
                          )}
                        </div>
                      </td>

                      <td className="supplier-cell">
                        <div className="supplier-info">
                          <div
                            className={`supplier-name fw-medium ${
                              isCancelled ? "text-muted" : ""
                            }`}
                          >
                            {order.supplierName ||
                              order.supplier?.name ||
                              order.partyName ||
                              "Unknown Supplier"}
                          </div>
                          {(order.supplierMobile ||
                            order.supplier?.mobile ||
                            order.partyPhone ||
                            order.mobileNumber) && (
                            <small className="supplier-contact text-muted">
                              <FontAwesomeIcon icon={faUser} className="me-1" />
                              {order.supplierMobile ||
                                order.supplier?.mobile ||
                                order.partyPhone ||
                                order.mobileNumber}
                            </small>
                          )}
                          {order.supplierEmail && (
                            <small className="supplier-email text-muted d-block">
                              {order.supplierEmail}
                            </small>
                          )}
                        </div>
                      </td>

                      <td className="items-cell">
                        <div className="items-info">
                          <Badge
                            bg={isCancelled ? "secondary" : "info"}
                            className={`items-count ${
                              isCancelled ? "opacity-50" : ""
                            }`}
                          >
                            <FontAwesomeIcon icon={faBoxes} className="me-1" />
                            {itemsCount} item{itemsCount !== 1 ? "s" : ""}
                          </Badge>
                          {itemsCount > 0 && Array.isArray(order.items) && (
                            <small className="text-muted d-block mt-1">
                              {order.items
                                ?.slice(0, 2)
                                .map((item) => item.itemName || item.name)
                                .join(", ")}
                              {itemsCount > 2 && ` +${itemsCount - 2} more`}
                            </small>
                          )}
                        </div>
                      </td>

                      {showBidirectionalColumns && (
                        <td className="source-cell">
                          <SourceBadge order={order} />
                        </td>
                      )}

                      {showBidirectionalColumns && (
                        <td className="generated-orders-cell">
                          <GeneratedOrdersBadge order={order} />
                        </td>
                      )}

                      <td className="delivery-cell">
                        <div className="delivery-info">
                          {order.expectedDeliveryDate || order.deliveryDate ? (
                            <>
                              <small
                                className={`delivery-date ${
                                  isCancelled ? "text-muted" : ""
                                }`}
                              >
                                {new Date(
                                  order.expectedDeliveryDate ||
                                    order.deliveryDate
                                ).toLocaleDateString("en-GB")}
                              </small>
                              {(() => {
                                const deliveryDate = new Date(
                                  order.expectedDeliveryDate ||
                                    order.deliveryDate
                                );
                                const today = new Date();
                                const diffTime = deliveryDate - today;
                                const diffDays = Math.ceil(
                                  diffTime / (1000 * 60 * 60 * 24)
                                );

                                if (diffDays < 0) {
                                  return (
                                    <small className="text-danger d-block">
                                      {Math.abs(diffDays)} days overdue
                                    </small>
                                  );
                                } else if (diffDays <= 3) {
                                  return (
                                    <small className="text-warning d-block">
                                      {diffDays} days remaining
                                    </small>
                                  );
                                } else {
                                  return (
                                    <small className="text-muted d-block">
                                      {diffDays} days remaining
                                    </small>
                                  );
                                }
                              })()}
                            </>
                          ) : (
                            <small className="text-muted">Not set</small>
                          )}
                        </div>
                      </td>

                      <td className="amount-cell text-end">
                        <div className="amount-info">
                          <strong
                            className={`order-amount ${
                              isCancelled
                                ? "text-muted text-decoration-line-through"
                                : "text-success"
                            }`}
                          >
                            ₹{amount.toLocaleString("en-IN")}
                          </strong>
                          {amount > 100000 && (
                            <small className="text-muted d-block">
                              ₹{(amount / 100000).toFixed(1)}L
                            </small>
                          )}
                        </div>
                      </td>

                      <td className="status-cell">
                        <StatusBadge
                          status={order.status}
                          priority={order.priority}
                        />
                      </td>

                      <td className="priority-cell">
                        <div className="priority-info">
                          <Badge
                            bg={
                              isCancelled
                                ? "secondary"
                                : order.priority === "high"
                                ? "danger"
                                : order.priority === "urgent"
                                ? "warning"
                                : order.priority === "low"
                                ? "info"
                                : "success"
                            }
                            className={`priority-badge text-capitalize ${
                              isCancelled ? "opacity-50" : ""
                            }`}
                          >
                            <FontAwesomeIcon
                              icon={
                                order.priority === "high"
                                  ? faExclamationTriangle
                                  : order.priority === "urgent"
                                  ? faClock
                                  : order.priority === "low"
                                  ? faCheckCircle
                                  : faUser
                              }
                              className="me-1"
                            />
                            {order.priority || "Normal"}
                          </Badge>
                        </div>
                      </td>

                      {enableActions && (
                        <td
                          className="actions-cell text-center"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <ActionButton order={order} />
                        </td>
                      )}
                    </tr>
                  );
                })}
              </tbody>
            ) : (
              <tbody>
                <tr>
                  <td colSpan="12" className="text-center py-5">
                    <FontAwesomeIcon
                      icon={faSearch}
                      size="3x"
                      className="text-muted mb-3"
                    />
                    <h5 className="text-muted">No Orders Found</h5>
                    <p className="text-muted">
                      No purchase orders match your current filters.
                    </p>
                  </td>
                </tr>
              </tbody>
            )}
          </Table>

          {/* ✅ Empty state for filtered results */}
          {safeFilteredOrders.length === 0 && safePurchaseOrders.length > 0 && (
            <div className="text-center py-5">
              <FontAwesomeIcon
                icon={faSearch}
                size="3x"
                className="text-muted mb-3"
              />
              <h5 className="text-muted mb-3">No Orders Found</h5>
              <p className="text-muted mb-4">
                No purchase orders match your current filters. Try adjusting
                your search terms or filters.
              </p>
              <Button
                variant="outline-primary"
                size="sm"
                onClick={() => {
                  setLocalSearchTerm("");
                  setLocalFilterStatus("all");
                  if (onSearchChange) onSearchChange("");
                  if (onFilterChange) onFilterChange("all");
                }}
              >
                Clear Filters
              </Button>
            </div>
          )}

          {/* ✅ Table footer with summary */}
          {safeFilteredOrders.length > 0 && (
            <div className="table-footer-summary">
              <Container fluid className="px-3 py-2">
                <Row className="align-items-center">
                  <Col>
                    <small className="text-muted">
                      Showing {safeFilteredOrders.length} of{" "}
                      {safePurchaseOrders.length} orders
                    </small>
                  </Col>
                  <Col xs="auto">
                    <div className="summary-stats d-flex gap-3">
                      <small className="text-muted">
                        <strong>Total Value:</strong> ₹
                        {safeFilteredOrders
                          .reduce((sum, order) => {
                            if (!order) return sum;
                            const amount = parseFloat(
                              order.amount ||
                                order.total ||
                                order.totals?.finalTotal ||
                                0
                            );
                            return sum + (isNaN(amount) ? 0 : amount);
                          }, 0)
                          .toLocaleString("en-IN")}
                      </small>
                      <small className="text-muted">
                        <strong>Active:</strong>{" "}
                        {safeSeparatedOrders.active?.length || 0}
                      </small>
                      {(safeSeparatedOrders.cancelled?.length || 0) > 0 && (
                        <small className="text-muted">
                          <strong>Cancelled:</strong>{" "}
                          {safeSeparatedOrders.cancelled?.length || 0}
                        </small>
                      )}
                    </div>
                  </Col>
                </Row>
              </Container>
            </div>
          )}
        </div>
      </div>

      {/* ✅ View Modal */}
      {selectedOrder && (
        <SimpleViewModal
          show={viewModalShow}
          onHide={() => {
            setViewModalShow(false);
            setSelectedOrder(null);
            setModalError(null);
          }}
          order={selectedOrder}
        />
      )}

      {/* ✅ DEBUG: Development debug panel */}
      {process.env.NODE_ENV === "development" && (
        <div
          style={{
            position: "fixed",
            bottom: "20px",
            right: "20px",
            background: "rgba(0,0,0,0.8)",
            color: "white",
            padding: "10px",
            borderRadius: "8px",
            fontSize: "12px",
            zIndex: 9999,
            maxWidth: "300px",
          }}
        >
          <div>
            <strong>Debug Info:</strong>
          </div>
          <div>Total: {safePurchaseOrders.length}</div>
          <div>Filtered: {safeFilteredOrders.length}</div>
          <div>Search: "{localSearchTerm}"</div>
          <div>Status: "{localFilterStatus}"</div>
          <div>Loading: {finalIsLoading ? "Yes" : "No"}</div>
          <div>Error: {fetchError ? "Yes" : "No"}</div>
        </div>
      )}

      {/* ✅ Enhanced CSS Styling */}
      <style jsx>{`
        /* ==================== MAIN CONTAINER ==================== */
        .purchase-orders-filter-section {
          background: linear-gradient(135deg, #f8f9ff 0%, #f3f4f6 100%);
          border-radius: 12px;
          padding: 20px;
          border: 1px solid #e5e7eb;
          margin-bottom: 20px;
        }

        .text-purple {
          color: #6f42c1 !important;
        }

        /* ==================== TABLE WRAPPER ==================== */
        .purchase-orders-table-wrapper {
          background: white;
          border-radius: 16px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05),
            0 10px 15px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(111, 66, 193, 0.1);
          border: 1px solid #e5e7eb;
          position: relative;
          overflow: hidden;
          backdrop-filter: blur(10px);
        }

        .table-responsive-wrapper {
          overflow-x: auto;
          overflow-y: visible;
          position: relative;
          scrollbar-width: thin;
          scrollbar-color: rgba(111, 66, 193, 0.3) transparent;
        }

        .table-responsive-wrapper::-webkit-scrollbar {
          height: 8px;
        }

        .table-responsive-wrapper::-webkit-scrollbar-track {
          background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
          border-radius: 4px;
        }

        .table-responsive-wrapper::-webkit-scrollbar-thumb {
          background: linear-gradient(90deg, #6f42c1 0%, #8b5cf6 100%);
          border-radius: 4px;
          transition: all 0.3s ease;
        }

        .table-responsive-wrapper::-webkit-scrollbar-thumb:hover {
          background: linear-gradient(90deg, #5a2d91 0%, #7c3aed 100%);
        }

        /* ==================== TABLE HEADER ==================== */
        .table-header-purple {
          background: linear-gradient(
            135deg,
            #6f42c1 0%,
            #8b5cf6 25%,
            #a855f7 50%,
            #c084fc 75%,
            #ddd6fe 100%
          );
          position: sticky;
          top: 0;
          z-index: 100;
        }

        .table-header-purple th {
          background: transparent !important;
          border: none;
          border-bottom: 3px solid rgba(255, 255, 255, 0.2);
          font-weight: 700;
          padding: 18px 16px;
          font-size: 0.9rem;
          color: #ffffff !important;
          white-space: nowrap;
          text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
          position: relative;
          letter-spacing: 0.5px;
          text-transform: uppercase;
        }

        .table-header-purple th::before {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: linear-gradient(
            45deg,
            rgba(255, 255, 255, 0.1) 0%,
            transparent 50%,
            rgba(255, 255, 255, 0.05) 100%
          );
          pointer-events: none;
        }

        .table-header-purple th:hover {
          background: rgba(255, 255, 255, 0.15) !important;
          transform: translateY(-1px);
          transition: all 0.3s ease;
        }

        .sort-icon {
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .sort-icon:hover {
          color: rgba(255, 255, 255, 1) !important;
          transform: scale(1.2);
        }

        /* ==================== COLUMN SIZING ==================== */
        .selection-column {
          width: 50px;
          min-width: 50px;
        }
        .date-column {
          width: 120px;
          min-width: 120px;
        }
        .order-number-column {
          width: 180px;
          min-width: 180px;
        }
        .supplier-column {
          width: 200px;
          min-width: 200px;
        }
        .items-column {
          width: 150px;
          min-width: 150px;
        }
        .source-column {
          width: 140px;
          min-width: 140px;
        }
        .generated-orders-column {
          width: 160px;
          min-width: 160px;
        }
        .delivery-column {
          width: 140px;
          min-width: 140px;
        }
        .amount-column {
          width: 120px;
          min-width: 120px;
        }
        .status-column {
          width: 120px;
          min-width: 120px;
        }
        .priority-column {
          width: 100px;
          min-width: 100px;
        }
        .actions-column {
          width: 80px;
          min-width: 80px;
        }

        /* ==================== TABLE BODY ==================== */
        .purchase-orders-table {
          margin-bottom: 0;
          font-size: 0.9rem;
          width: 100%;
          table-layout: fixed;
          min-width: 1400px;
        }

        .purchase-orders-table tbody tr {
          transition: all 0.3s ease;
          border-bottom: 1px solid #f1f3f4;
          position: relative;
        }

        .purchase-orders-table tbody tr:hover {
          background: linear-gradient(
            90deg,
            rgba(111, 66, 193, 0.08) 0%,
            rgba(139, 92, 246, 0.05) 50%,
            rgba(168, 85, 247, 0.03) 100%
          );
          transform: translateY(-2px) scale(1.001);
          box-shadow: 0 8px 25px rgba(111, 66, 193, 0.15),
            0 0 0 1px rgba(111, 66, 193, 0.1);
          border-left: 4px solid #6f42c1;
          cursor: pointer;
          z-index: 10;
        }

        .purchase-order-row.even-row {
          background: rgba(248, 249, 255, 0.3);
        }

        .purchase-order-row.odd-row {
          background: rgba(255, 255, 255, 0.5);
        }

        .table-active-purple {
          background: linear-gradient(
            90deg,
            rgba(111, 66, 193, 0.15) 0%,
            rgba(139, 92, 246, 0.1) 50%,
            rgba(168, 85, 247, 0.05) 100%
          ) !important;
          border-left: 4px solid #6f42c1 !important;
          box-shadow: inset 0 0 0 1px rgba(111, 66, 193, 0.2);
        }

        .cancelled-order-row {
          background: linear-gradient(
            90deg,
            rgba(108, 117, 125, 0.1) 0%,
            rgba(173, 181, 189, 0.05) 100%
          ) !important;
          border-left: 4px solid #6c757d !important;
          opacity: 0.7;
        }

        .cancelled-order-row:hover {
          opacity: 0.8;
          border-left: 4px solid #6c757d !important;
          background: linear-gradient(
            90deg,
            rgba(108, 117, 125, 0.15) 0%,
            rgba(173, 181, 189, 0.1) 100%
          ) !important;
        }

        /* ==================== TABLE CELLS ==================== */
        .purchase-orders-table td {
          padding: 16px 12px;
          vertical-align: middle;
          border-bottom: 1px solid #f8f9fa;
          position: relative;
        }

        /* Date Cell */
        .date-cell .date-wrapper {
          display: flex;
          flex-direction: column;
          gap: 2px;
        }

        .order-date {
          font-weight: 600;
          color: #374151;
        }

        .order-time {
          font-size: 0.75rem;
          color: #6b7280;
        }

        /* Order Number Cell */
        .order-number-cell .order-number-wrapper {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .order-number-link {
          text-decoration: none;
          font-weight: 700;
          transition: all 0.3s ease;
        }

        .order-number-link:hover {
          color: #5a2d91 !important;
          text-decoration: underline;
        }

        .auto-generated-indicator {
          margin-top: 4px;
        }

        .cancellation-indicator {
          margin-top: 2px;
        }

        /* Supplier Cell */
        .supplier-info {
          display: flex;
          flex-direction: column;
          gap: 3px;
        }

        .supplier-name {
          font-size: 0.9rem;
          line-height: 1.2;
        }

        .supplier-contact,
        .supplier-email {
          font-size: 0.75rem;
          line-height: 1.2;
        }

        /* Items Cell */
        .items-info {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .items-count {
          font-weight: 600;
        }

        /* Amount Cell */
        .amount-info {
          display: flex;
          flex-direction: column;
          align-items: flex-end;
          gap: 2px;
        }

        .order-amount {
          font-size: 1rem;
          font-weight: 700;
          line-height: 1.2;
        }

        /* Delivery Cell */
        .delivery-info {
          display: flex;
          flex-direction: column;
          gap: 2px;
        }

        .delivery-date {
          font-weight: 500;
          font-size: 0.85rem;
        }

        /* Priority Cell */
        .priority-info {
          display: flex;
          flex-direction: column;
          align-items: flex-start;
          gap: 2px;
        }

        .priority-badge {
          font-weight: 600;
          font-size: 0.75rem;
          padding: 0.4em 0.8em;
          border-radius: 6px;
        }

        /* ==================== BADGES ==================== */
        .badge {
          font-size: 0.75rem;
          font-weight: 600;
          padding: 0.4em 0.8em;
          border-radius: 6px;
          letter-spacing: 0.3px;
          transition: all 0.3s ease;
        }

        .badge:hover {
          transform: scale(1.05);
        }

        .badge.bg-secondary {
          background: linear-gradient(45deg, #6b7280, #4b5563) !important;
        }

        .badge.bg-warning {
          background: linear-gradient(45deg, #f59e0b, #d97706) !important;
        }

        .badge.bg-primary {
          background: linear-gradient(45deg, #6f42c1, #8b5cf6) !important;
        }

        .badge.bg-info {
          background: linear-gradient(45deg, #06b6d4, #0891b2) !important;
        }

        .badge.bg-success {
          background: linear-gradient(45deg, #10b981, #059669) !important;
        }

        .badge.bg-danger {
          background: linear-gradient(45deg, #ef4444, #dc2626) !important;
        }

        .badge.bg-dark {
          background: linear-gradient(45deg, #374151, #1f2937) !important;
        }

        /* ==================== ACTION DROPDOWN ==================== */
        .actions-cell {
          position: relative;
          z-index: 50;
        }

        .dropdown {
          position: static;
        }

        .dropdown-toggle {
          border: none !important;
          box-shadow: none !important;
          background: rgba(111, 66, 193, 0.1) !important;
          color: #6f42c1 !important;
          border-radius: 8px !important;
          padding: 8px 12px !important;
          transition: all 0.3s ease !important;
        }

        .dropdown-toggle:hover,
        .dropdown-toggle:focus {
          background: rgba(111, 66, 193, 0.2) !important;
          transform: scale(1.05);
          box-shadow: 0 4px 12px rgba(111, 66, 193, 0.3) !important;
        }

        .dropdown-menu {
          border: none !important;
          box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15),
            0 0 0 1px rgba(111, 66, 193, 0.1) !important;
          border-radius: 12px !important;
          padding: 8px !important;
          margin-top: 8px !important;
          min-width: 220px !important;
          z-index: 9999 !important;
          backdrop-filter: blur(10px);
          background: rgba(255, 255, 255, 0.95) !important;
        }

        .dropdown-item {
          padding: 10px 16px !important;
          font-size: 0.875rem !important;
          border-radius: 8px !important;
          margin: 2px 0 !important;
          transition: all 0.3s ease !important;
          display: flex !important;
          align-items: center !important;
        }

        .dropdown-item:hover {
          background: linear-gradient(
            90deg,
            rgba(111, 66, 193, 0.1) 0%,
            rgba(139, 92, 246, 0.08) 100%
          ) !important;
          color: #6f42c1 !important;
          transform: translateX(4px);
          padding-left: 20px !important;
        }

        .dropdown-header {
          font-size: 0.75rem !important;
          color: #6f42c1 !important;
          font-weight: 700 !important;
          text-transform: uppercase !important;
          letter-spacing: 1px !important;
          background: linear-gradient(
            90deg,
            rgba(111, 66, 193, 0.1) 0%,
            rgba(139, 92, 246, 0.05) 100%
          ) !important;
          margin: 8px -8px 4px -8px !important;
          padding: 8px 16px !important;
          border-radius: 6px !important;
        }

        .dropdown-divider {
          border-color: rgba(111, 66, 193, 0.2) !important;
          margin: 8px 0 !important;
        }

        /* ==================== TABLE FOOTER ==================== */
        .table-footer-summary {
          background: linear-gradient(135deg, #f8f9ff 0%, #f3f4f6 100%);
          border-top: 1px solid rgba(111, 66, 193, 0.1);
          border-radius: 0 0 16px 16px;
        }

        .summary-stats {
          font-size: 0.85rem;
        }

        .summary-stats strong {
          color: #6f42c1;
        }

        /* ==================== CHECKBOXES ==================== */
        .purple-checkbox input[type="checkbox"],
        .row-checkbox input[type="checkbox"] {
          accent-color: #6f42c1;
          transform: scale(1.2);
          border-radius: 4px;
        }

        .purple-checkbox input[type="checkbox"]:checked,
        .row-checkbox input[type="checkbox"]:checked {
          background-color: #6f42c1;
          border-color: #6f42c1;
        }

        /* ==================== RESPONSIVE DESIGN ==================== */
        @media (max-width: 1400px) {
          .purchase-orders-table {
            min-width: 1200px;
          }

          .purchase-orders-table th,
          .purchase-orders-table td {
            padding: 14px 10px;
            font-size: 0.85rem;
          }
        }

        @media (max-width: 1200px) {
          .purchase-orders-table {
            min-width: 1000px;
          }

          .purchase-orders-table th,
          .purchase-orders-table td {
            padding: 12px 8px;
            font-size: 0.8rem;
          }
        }

        @media (max-width: 992px) {
          .purchase-orders-table {
            min-width: 900px;
          }
        }

        @media (max-width: 768px) {
          .purchase-orders-filter-section {
            padding: 15px;
            margin: 0 -15px 15px -15px;
            border-radius: 0;
          }

          .purchase-orders-table-wrapper {
            border-radius: 8px;
            margin: 0 -15px;
          }

          .purchase-orders-table {
            min-width: 800px;
          }

          .purchase-orders-table th,
          .purchase-orders-table td {
            padding: 8px 6px;
            font-size: 0.75rem;
          }

          .table-header-purple th {
            padding: 12px 8px;
            font-size: 0.7rem;
          }
        }

        @media (max-width: 576px) {
          .purchase-orders-table-wrapper {
            border-radius: 0;
            margin: 0 -15px;
          }

          .purchase-orders-table {
            min-width: 700px;
          }

          .purchase-orders-table th,
          .purchase-orders-table td {
            padding: 6px 4px;
            font-size: 0.7rem;
          }
        }

        /* ==================== ANIMATIONS ==================== */
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        @keyframes slideInRight {
          from {
            opacity: 0;
            transform: translateX(-20px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }

        .purchase-order-row {
          animation: fadeInUp 0.3s ease-out;
        }

        .dropdown-menu.show {
          animation: slideInRight 0.3s ease-out;
        }

        /* ==================== ACCESSIBILITY ==================== */
        .purchase-orders-table tr:focus {
          outline: 2px solid #6f42c1;
          outline-offset: -2px;
        }

        .dropdown-toggle:focus {
          box-shadow: 0 0 0 3px rgba(111, 66, 193, 0.25) !important;
        }

        /* ==================== PRINT STYLES ==================== */
        @media print {
          .purchase-orders-table-wrapper {
            box-shadow: none;
            border: 1px solid #000;
          }

          .table-header-purple {
            background: #6f42c1 !important;
            -webkit-print-color-adjust: exact;
          }

          .actions-column,
          .actions-cell {
            display: none;
          }
        }
      `}</style>
    </>
  );
}

export default PurchaseOrderTable;
