import React from "react";
import {
  Container,
  Row,
  Col,
  Button,
  ButtonGroup,
  InputGroup,
  Form,
  Badge,
} from "react-bootstrap";
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {
  faClipboardList,
  faSearch,
  faFileExcel,
  faList,
  faUserTie,
  faBuilding,
  faRobot,
  faCheckCircle,
  faUndo,
  faSpinner,
  faPrint,
  faExclamationTriangle,
  faTags,
  faUser,
  faTruck,
  faBoxes,
  faFileInvoice,
  faClock,
} from "@fortawesome/free-solid-svg-icons";

const OrderFilters = ({
  title = "Sales Orders",
  filteredOrdersCount = 0,
  categorizeOrders = {
    all: [],
    selfCreated: [],
    fromPurchaseOrders: [],
    autoGenerated: [],
  },
  activeOrderType = "all",
  setActiveOrderType,
  localSearchTerm = "",
  setLocalSearchTerm,
  searchPlaceholder = "Search orders...",
  onSearchChange,
  localFilterStatus = "all",
  setLocalFilterStatus,
  onFilterChange,
  enableBulkActions = false,
  selectedOrders = [],
  onBulkConfirm,
  isLoading = false,
  addToast,
  showHeader = true,
  PrintControls,
  // Enhanced filtering props
  showOrderTypeFilter = true,
  showConfirmationSummary = true,
  showExportButton = true,
  enableAdvancedFilters = false,
  // Print related props
  printLoading = false,
  printError = null,
  // Custom filter options
  customFilterOptions = null,
  onCustomFilter,
  // Date range filtering
  enableDateFilter = false,
  dateRange = null,
  onDateRangeChange,
  // Status filtering enhancement
  statusOptions = [
    {value: "all", label: "All Status"},
    {value: "draft", label: "Draft"},
    {value: "pending", label: "Pending"},
    {value: "confirmed", label: "Confirmed"},
    {value: "approved", label: "Approved"},
    {value: "shipped", label: "Shipped"},
    {value: "delivered", label: "Delivered"},
    {value: "completed", label: "Completed"},
    {value: "cancelled", label: "Cancelled"},
  ],
  // Export functionality
  onExport,
  exportLoading = false,
  // Refresh functionality
  onRefresh,
  refreshLoading = false,
}) => {
  // ✅ Order type filter configuration
  const filterOptions = [
    {
      key: "all",
      label: "All Orders",
      icon: faList,
      count: categorizeOrders.all.length,
      color: "primary",
      description: "Show all orders",
    },
    {
      key: "self",
      label: "Self Created",
      icon: faUserTie,
      count: categorizeOrders.selfCreated.length,
      color: "success",
      description: "Orders created manually",
    },
    {
      key: "fromPO",
      label: "From Purchase Orders",
      icon: faBuilding,
      count: categorizeOrders.fromPurchaseOrders.length,
      color: "warning",
      description: "Orders generated from purchase orders",
    },
    {
      key: "auto",
      label: "Auto-Generated",
      icon: faRobot,
      count: categorizeOrders.autoGenerated.length,
      color: "info",
      description: "Automatically generated orders",
    },
  ];

  // ✅ Calculate confirmation statistics
  const confirmationStats = React.useMemo(() => {
    const needsConfirmation =
      filteredOrdersCount > 0
        ? categorizeOrders.all.filter(
            (order) =>
              order.isAutoGenerated &&
              order.generatedFrom === "purchase_order" &&
              (order.status === "sent" || order.status === "draft") &&
              !order.confirmedAt &&
              !order.isConfirmed &&
              order.status !== "confirmed"
          ).length
        : 0;

    const confirmed =
      filteredOrdersCount > 0
        ? categorizeOrders.all.filter(
            (order) =>
              order.isAutoGenerated &&
              order.generatedFrom === "purchase_order" &&
              order.status === "confirmed"
          ).length
        : 0;

    return {needsConfirmation, confirmed};
  }, [categorizeOrders.all, filteredOrdersCount]);

  // ✅ Handle bulk confirmation
  const handleBulkConfirm = async () => {
    const needsConfirmation = selectedOrders.filter(
      (order) =>
        order.isAutoGenerated &&
        order.generatedFrom === "purchase_order" &&
        order.status === "sent"
    );

    if (needsConfirmation.length > 0) {
      await onBulkConfirm(needsConfirmation);
    } else {
      addToast?.("No selected orders need confirmation", "info");
    }
  };

  // ✅ Handle export
  const handleExport = () => {
    if (onExport) {
      onExport({
        orderType: activeOrderType,
        searchTerm: localSearchTerm,
        status: localFilterStatus,
        dateRange: dateRange,
        orders: categorizeOrders.all,
      });
    }
  };

  // ✅ Handle refresh
  const handleRefresh = () => {
    if (onRefresh) {
      onRefresh(true); // Force refresh
    }
  };

  // ✅ Clear all filters
  const handleClearFilters = () => {
    setActiveOrderType("all");
    setLocalSearchTerm("");
    setLocalFilterStatus("all");
    if (onSearchChange) onSearchChange("");
    if (onFilterChange) onFilterChange("all");
    if (onDateRangeChange) onDateRangeChange(null);
  };

  if (!showHeader) {
    return null;
  }

  return (
    <div className="sales-orders-filter-section mb-4">
      <Container fluid className="px-0">
        {/* ✅ Main Header Row */}
        <Row className="align-items-center mb-3">
          <Col>
            <div className="d-flex align-items-center gap-3">
              <h5 className="mb-0 text-purple d-flex align-items-center">
                <FontAwesomeIcon icon={faClipboardList} className="me-2" />
                {title}
                <Badge bg="light" text="dark" className="ms-2 count-badge">
                  {filteredOrdersCount}
                </Badge>
              </h5>

              {/* ✅ Loading indicator */}
              {isLoading && (
                <div className="d-flex align-items-center text-info">
                  <FontAwesomeIcon icon={faSpinner} className="fa-spin me-2" />
                  <small>
                    <strong>Loading...</strong>
                  </small>
                </div>
              )}

              {/* ✅ Print status indicator */}
              {printLoading && (
                <div className="d-flex align-items-center text-info">
                  <FontAwesomeIcon icon={faSpinner} className="fa-spin me-2" />
                  <small>
                    <strong>Preparing print...</strong>
                  </small>
                </div>
              )}

              {/* ✅ Print error indicator */}
              {printError && (
                <div className="d-flex align-items-center text-danger">
                  <FontAwesomeIcon
                    icon={faExclamationTriangle}
                    className="me-2"
                  />
                  <small>
                    <strong>Print Error</strong>
                  </small>
                </div>
              )}
            </div>
          </Col>

          <Col xs="auto">
            <div className="d-flex gap-2 align-items-center flex-wrap">
              {/* ✅ Print Controls */}
              {PrintControls && <PrintControls />}

              {/* ✅ Refresh Button */}
              <Button
                variant="outline-secondary"
                size="sm"
                onClick={handleRefresh}
                disabled={refreshLoading || isLoading}
                title="Refresh orders list"
                className="refresh-btn"
              >
                <FontAwesomeIcon
                  icon={refreshLoading || isLoading ? faSpinner : faUndo}
                  className={`me-1 ${
                    refreshLoading || isLoading ? "fa-spin" : ""
                  }`}
                />
                {refreshLoading || isLoading ? "Loading..." : "Refresh"}
              </Button>

              {/* ✅ Export Button */}
              {showExportButton && (
                <Button
                  variant="outline-primary"
                  size="sm"
                  onClick={handleExport}
                  disabled={exportLoading || filteredOrdersCount === 0}
                  title="Export filtered orders"
                  className="export-btn"
                >
                  <FontAwesomeIcon
                    icon={exportLoading ? faSpinner : faFileExcel}
                    className={`me-1 ${exportLoading ? "fa-spin" : ""}`}
                  />
                  {exportLoading ? "Exporting..." : "Export"}
                </Button>
              )}
            </div>
          </Col>
        </Row>

        {/* ✅ Order Type Filter */}
        {showOrderTypeFilter && (
          <Row className="mb-3">
            <Col>
              <ButtonGroup size="sm" className="order-type-filter">
                {filterOptions.map((option) => (
                  <Button
                    key={option.key}
                    variant={
                      activeOrderType === option.key
                        ? option.color
                        : "outline-" + option.color
                    }
                    onClick={() => setActiveOrderType(option.key)}
                    className="d-flex align-items-center filter-option-btn"
                    title={option.description}
                  >
                    <FontAwesomeIcon icon={option.icon} className="me-2" />
                    <span className="filter-label">{option.label}</span>
                    <Badge
                      bg={
                        activeOrderType === option.key ? "light" : option.color
                      }
                      text={activeOrderType === option.key ? "dark" : "white"}
                      className="ms-2 filter-count-badge"
                    >
                      {option.count}
                    </Badge>
                  </Button>
                ))}
              </ButtonGroup>
            </Col>
          </Row>
        )}

        {/* ✅ Search and Filter Controls */}
        <Row className="align-items-center">
          <Col md={8}>
            <div className="d-flex gap-2 align-items-center flex-wrap">
              {/* ✅ Search Input */}
              <InputGroup size="sm" className="search-input-group">
                <InputGroup.Text className="search-icon">
                  <FontAwesomeIcon icon={faSearch} />
                </InputGroup.Text>
                <Form.Control
                  type="text"
                  placeholder={searchPlaceholder}
                  value={localSearchTerm}
                  onChange={(e) => {
                    setLocalSearchTerm(e.target.value);
                    if (onSearchChange) {
                      onSearchChange(e.target.value);
                    }
                  }}
                  className="search-input"
                />
                {/* ✅ Clear search button */}
                {localSearchTerm && (
                  <Button
                    variant="outline-secondary"
                    size="sm"
                    onClick={() => {
                      setLocalSearchTerm("");
                      if (onSearchChange) onSearchChange("");
                    }}
                    className="clear-search-btn"
                  >
                    ×
                  </Button>
                )}
              </InputGroup>

              {/* ✅ Status Filter */}
              <Form.Select
                size="sm"
                value={localFilterStatus}
                onChange={(e) => {
                  setLocalFilterStatus(e.target.value);
                  if (onFilterChange) {
                    onFilterChange(e.target.value);
                  }
                }}
                className="status-filter-select"
              >
                {statusOptions.map((option) => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </Form.Select>

              {/* ✅ Date Range Filter */}
              {enableDateFilter && (
                <div className="date-filter-group">
                  <Form.Control
                    type="date"
                    size="sm"
                    value={dateRange?.start || ""}
                    onChange={(e) => {
                      const newRange = {...dateRange, start: e.target.value};
                      if (onDateRangeChange) onDateRangeChange(newRange);
                    }}
                    className="date-input"
                    placeholder="Start date"
                  />
                  <span className="date-separator">to</span>
                  <Form.Control
                    type="date"
                    size="sm"
                    value={dateRange?.end || ""}
                    onChange={(e) => {
                      const newRange = {...dateRange, end: e.target.value};
                      if (onDateRangeChange) onDateRangeChange(newRange);
                    }}
                    className="date-input"
                    placeholder="End date"
                  />
                </div>
              )}

              {/* ✅ Custom Filters */}
              {enableAdvancedFilters && customFilterOptions && (
                <Form.Select
                  size="sm"
                  onChange={(e) => onCustomFilter?.(e.target.value)}
                  className="custom-filter-select"
                >
                  <option value="">Custom Filter</option>
                  {customFilterOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </Form.Select>
              )}

              {/* ✅ Clear Filters Button */}
              {(localSearchTerm ||
                localFilterStatus !== "all" ||
                activeOrderType !== "all" ||
                dateRange) && (
                <Button
                  variant="outline-secondary"
                  size="sm"
                  onClick={handleClearFilters}
                  title="Clear all filters"
                  className="clear-filters-btn"
                >
                  Clear Filters
                </Button>
              )}
            </div>
          </Col>

          <Col md={4}>
            <div className="d-flex justify-content-end">
              {/* ✅ Bulk Confirmation Button */}
              {enableBulkActions && selectedOrders.length > 0 && (
                <Button
                  variant="success"
                  size="sm"
                  onClick={handleBulkConfirm}
                  disabled={isLoading}
                  title="Bulk confirm selected orders"
                  className="bulk-confirm-btn"
                >
                  <FontAwesomeIcon icon={faCheckCircle} className="me-1" />
                  Confirm Selected (
                  {
                    selectedOrders.filter(
                      (order) =>
                        order.isAutoGenerated &&
                        order.generatedFrom === "purchase_order" &&
                        order.status === "sent"
                    ).length
                  }
                  )
                </Button>
              )}

              {/* ✅ Quick Stats */}
              {filteredOrdersCount > 0 && (
                <div className="d-flex align-items-center ms-3">
                  <small className="text-muted quick-stats">
                    <strong>{filteredOrdersCount}</strong> order
                    {filteredOrdersCount !== 1 ? "s" : ""}
                    {selectedOrders.length > 0 && enableBulkActions && (
                      <span className="ms-2 selected-count">
                        (<strong>{selectedOrders.length}</strong> selected)
                      </span>
                    )}
                  </small>
                </div>
              )}
            </div>
          </Col>
        </Row>

        {/* ✅ Confirmation Summary */}
        {showConfirmationSummary && filteredOrdersCount > 0 && (
          <Row className="mt-3">
            <Col>
              <div className="confirmation-summary d-flex align-items-center gap-4 flex-wrap">
                <small className="text-muted summary-item">
                  <FontAwesomeIcon icon={faList} className="me-1" />
                  <strong>Total Orders:</strong> {filteredOrdersCount}
                </small>

                <small className="text-muted summary-item">
                  <FontAwesomeIcon icon={faClock} className="me-1" />
                  <strong>Needs Confirmation:</strong>
                  <Badge
                    bg={
                      confirmationStats.needsConfirmation > 0
                        ? "warning"
                        : "success"
                    }
                    text="dark"
                    className="ms-1"
                  >
                    {confirmationStats.needsConfirmation}
                  </Badge>
                </small>

                <small className="text-muted summary-item">
                  <FontAwesomeIcon icon={faCheckCircle} className="me-1" />
                  <strong>Confirmed:</strong>
                  <Badge bg="success" className="ms-1">
                    {confirmationStats.confirmed}
                  </Badge>
                </small>

                {/* ✅ Additional stats based on active filter */}
                {activeOrderType === "self" && (
                  <small className="text-muted summary-item">
                    <FontAwesomeIcon icon={faUserTie} className="me-1" />
                    <strong>Self Created:</strong>{" "}
                    {categorizeOrders.selfCreated.length}
                  </small>
                )}

                {activeOrderType === "fromPO" && (
                  <small className="text-muted summary-item">
                    <FontAwesomeIcon icon={faBuilding} className="me-1" />
                    <strong>From Purchase Orders:</strong>{" "}
                    {categorizeOrders.fromPurchaseOrders.length}
                  </small>
                )}

                {activeOrderType === "auto" && (
                  <small className="text-muted summary-item">
                    <FontAwesomeIcon icon={faRobot} className="me-1" />
                    <strong>Auto-Generated:</strong>{" "}
                    {categorizeOrders.autoGenerated.length}
                  </small>
                )}
              </div>
            </Col>
          </Row>
        )}

        {/* ✅ Active Filters Display */}
        {(localSearchTerm ||
          localFilterStatus !== "all" ||
          activeOrderType !== "all" ||
          dateRange) && (
          <Row className="mt-2">
            <Col>
              <div className="active-filters d-flex align-items-center gap-2 flex-wrap">
                <small className="text-muted">
                  <strong>Active filters:</strong>
                </small>

                {activeOrderType !== "all" && (
                  <Badge bg="primary" className="filter-tag">
                    Type:{" "}
                    {
                      filterOptions.find((f) => f.key === activeOrderType)
                        ?.label
                    }
                  </Badge>
                )}

                {localSearchTerm && (
                  <Badge bg="info" className="filter-tag">
                    Search: "{localSearchTerm}"
                  </Badge>
                )}

                {localFilterStatus !== "all" && (
                  <Badge bg="secondary" className="filter-tag">
                    Status:{" "}
                    {
                      statusOptions.find((s) => s.value === localFilterStatus)
                        ?.label
                    }
                  </Badge>
                )}

                {dateRange && (dateRange.start || dateRange.end) && (
                  <Badge bg="warning" text="dark" className="filter-tag">
                    Date: {dateRange.start || "Start"} to{" "}
                    {dateRange.end || "End"}
                  </Badge>
                )}
              </div>
            </Col>
          </Row>
        )}
      </Container>

      {/* ✅ Component Styles */}
      <style jsx>{`
        .sales-orders-filter-section {
          background: linear-gradient(135deg, #f8f9ff 0%, #f3f4f6 100%);
          border: 1px solid #e5e7eb;
          padding: 20px;
          margin-bottom: 20px;
          position: relative;
        }

        .text-purple {
          color: #6f42c1 !important;
        }

        .count-badge {
          font-size: 0.8rem !important;
          padding: 0.3em 0.6em !important;
          font-weight: 600;
        }

        .order-type-filter {
          gap: 2px;
        }

        .filter-option-btn {
          font-size: 0.85rem !important;
          padding: 8px 12px !important;
          transition: all 0.2s ease !important;
          border: 1px solid rgba(0, 0, 0, 0.1) !important;
        }

        .filter-option-btn:hover {
          transform: translateY(-1px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1) !important;
        }

        .filter-label {
          white-space: nowrap;
        }

        .filter-count-badge {
          font-size: 0.7rem !important;
          padding: 0.2em 0.4em !important;
          font-weight: 600;
        }

        .search-input-group {
          min-width: 280px;
          max-width: 350px;
        }

        .search-icon {
          background: #f8f9fa;
          border-color: #dee2e6;
        }

        .search-input {
          border-left: none;
        }

        .clear-search-btn {
          border-left: none;
          padding: 0.25rem 0.5rem;
        }

        .status-filter-select {
          min-width: 150px;
          max-width: 180px;
        }

        .date-filter-group {
          display: flex;
          align-items: center;
          gap: 8px;
        }

        .date-input {
          width: 130px;
        }

        .date-separator {
          font-size: 0.8rem;
          color: #6c757d;
        }

        .custom-filter-select {
          min-width: 150px;
        }

        .clear-filters-btn,
        .refresh-btn,
        .export-btn {
          white-space: nowrap;
        }

        .bulk-confirm-btn {
          white-space: nowrap;
          font-weight: 600;
        }

        .quick-stats {
          font-size: 0.85rem;
        }

        .selected-count {
          color: #28a745;
          font-weight: 600;
        }

        .confirmation-summary {
          padding: 10px 15px;
          background: rgba(255, 255, 255, 0.7);
          border: 1px solid rgba(111, 66, 193, 0.1);
          margin-top: 10px;
        }

        .summary-item {
          display: flex;
          align-items: center;
          font-size: 0.8rem;
        }

        .active-filters {
          padding: 8px 12px;
          background: rgba(255, 255, 255, 0.8);
          border: 1px solid rgba(111, 66, 193, 0.1);
        }

        .filter-tag {
          font-size: 0.7rem !important;
          padding: 0.25em 0.5em !important;
          font-weight: 500;
        }

        /* ✅ Responsive Design */
        @media (max-width: 768px) {
          .sales-orders-filter-section {
            padding: 15px;
          }

          .order-type-filter {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
          }

          .filter-option-btn {
            font-size: 0.75rem !important;
            padding: 6px 10px !important;
          }

          .filter-label {
            display: none;
          }

          .search-input-group {
            min-width: 200px;
            max-width: 100%;
          }

          .status-filter-select,
          .custom-filter-select {
            min-width: 120px;
          }

          .date-filter-group {
            flex-direction: column;
            gap: 5px;
          }

          .date-input {
            width: 100%;
          }

          .confirmation-summary,
          .active-filters {
            flex-direction: column;
            align-items: flex-start !important;
            gap: 8px !important;
          }
        }

        @media (max-width: 576px) {
          .filter-option-btn .filter-count-badge {
            display: none;
          }

          .bulk-confirm-btn {
            font-size: 0.75rem;
            padding: 0.375rem 0.5rem;
          }
        }

        /* ✅ Print Styles */
        @media print {
          .sales-orders-filter-section {
            display: none !important;
          }
        }

        /* ✅ Animation for active filters */
        .filter-tag {
          animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
          from {
            opacity: 0;
            transform: translateY(-10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        /* ✅ Loading state styles */
        .filter-option-btn:disabled {
          opacity: 0.6;
          cursor: not-allowed;
        }

        .search-input:disabled,
        .status-filter-select:disabled {
          background-color: #f8f9fa;
          opacity: 0.7;
        }
      `}</style>
    </div>
  );
};

export default OrderFilters;
