import React, {useState, useRef, useEffect, useCallback} from "react";
import {Button, Badge} from "react-bootstrap";
import {createPortal} from "react-dom";
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {
  faEllipsisV,
  faEye,
  faEdit,
  faTrash,
  faCopy,
  faShare,
  faDownload,
  faPrint,
  faExchangeAlt,
  faCheckCircle,
  faSpinner,
  faExclamationTriangle,
  faRobot,
  faArrowRight,
  faProjectDiagram,
  faCheck,
  faBan,
  faFileInvoice,
  faBoxes,
  faTruck,
} from "@fortawesome/free-solid-svg-icons";

const ActionButton = ({
  order,
  onAction,
  modalLoading = false,
  deletingOrders = new Set(),
  printLoading = false,
  enableActions = true,
  className = "",
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [position, setPosition] = useState({top: 0, left: 0});
  const buttonRef = useRef(null);
  const dropdownRef = useRef(null);

  const orderId = order._id || order.id;
  const isDeleting = deletingOrders.has(orderId);
  const isCancelled =
    order.status === "cancelled" || order.status === "deleted";
  const status = order.status || "draft";

  // ✅ Enhanced confirmation status logic
  const needsConfirmation = Boolean(
    order.isAutoGenerated &&
      order.generatedFrom === "purchase_order" &&
      order.status === "sent" &&
      !order.confirmedAt &&
      !order.isConfirmed
  );

  const isConfirmed = Boolean(
    order.isAutoGenerated &&
      order.generatedFrom === "purchase_order" &&
      (order.status === "confirmed" || order.confirmedAt || order.isConfirmed)
  );

  const wasAutoGenerated = Boolean(
    order.isAutoGenerated && order.generatedFrom === "purchase_order"
  );

  const isFromPurchaseOrder = Boolean(
    order.isAutoGenerated === true &&
      order.sourceOrderId &&
      order.sourceOrderType === "purchase_order"
  );

  const hasValidPOSetup = Boolean(
    !order.hasCorrespondingPurchaseOrder &&
      !order.hasGeneratedPurchaseOrder &&
      !isFromPurchaseOrder
  );

  const handleToggle = useCallback(
    (e) => {
      e.stopPropagation();

      if (!isOpen && buttonRef.current) {
        const rect = buttonRef.current.getBoundingClientRect();
        setPosition({
          top: rect.bottom + window.scrollY + 5,
          left: rect.left + window.scrollX - 180,
        });
      }
      setIsOpen(!isOpen);
    },
    [isOpen]
  );

  const handleActionClick = useCallback((actionFn, ...args) => {
    actionFn(...args);
    setIsOpen(false);
  }, []);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target) &&
        buttonRef.current &&
        !buttonRef.current.contains(event.target)
      ) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener("mousedown", handleClickOutside);
      return () =>
        document.removeEventListener("mousedown", handleClickOutside);
    }
  }, [isOpen]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (isOpen) {
        setIsOpen(false);
      }
    };
  }, []);

  const dropdownMenu =
    isOpen &&
    createPortal(
      <div
        ref={dropdownRef}
        className="custom-action-dropdown"
        style={{
          position: "absolute",
          top: position.top,
          left: position.left,
          zIndex: 9999,
        }}
      >
        <div
          className="bg-white border shadow-lg p-2"
          style={{minWidth: "240px"}}
        >
          {/* Confirmation Section */}
          {needsConfirmation && !isConfirmed && (
            <>
              <button
                className="btn btn-success btn-sm w-100 text-start mb-1 d-flex align-items-center"
                onClick={() => handleActionClick(onAction, "confirm", order)}
                disabled={modalLoading}
              >
                <FontAwesomeIcon
                  icon={modalLoading ? faSpinner : faCheckCircle}
                  className={`me-2 ${modalLoading ? "fa-spin" : ""}`}
                />
                {modalLoading ? "Confirming..." : "✅ Confirm Order"}
              </button>
              <div className="px-2 mb-2">
                <small className="text-warning fw-bold">
                  <FontAwesomeIcon
                    icon={faExclamationTriangle}
                    className="me-1"
                  />
                  This order needs confirmation
                </small>
              </div>
              <hr className="my-2" />
            </>
          )}

          {/* Confirmation Status */}
          {isConfirmed && wasAutoGenerated && (
            <>
              <div className="px-2 mb-2">
                <Badge bg="success" className="d-flex align-items-center">
                  <FontAwesomeIcon icon={faCheckCircle} className="me-1" />
                  Order Confirmed
                  {order.confirmedAt && (
                    <small className="ms-2 text-white-50">
                      {new Date(order.confirmedAt).toLocaleDateString("en-GB")}
                    </small>
                  )}
                </Badge>
                {order.confirmedBy && (
                  <small className="text-muted d-block mt-1">
                    Confirmed by: {order.confirmedBy}
                  </small>
                )}
              </div>
              <hr className="my-2" />
            </>
          )}

          {/* Primary Actions */}
          <button
            className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
            onClick={() => handleActionClick(onAction, "view", order)}
          >
            <FontAwesomeIcon icon={faEye} className="me-2 text-primary" />
            View Details
          </button>

          {/* Print & Share Section */}
          <hr className="my-2" />
          <div className="text-muted small fw-bold px-2 mb-1">
            PRINT & SHARE
          </div>

          <button
            className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
            onClick={() => handleActionClick(onAction, "print", order)}
            disabled={printLoading}
          >
            <FontAwesomeIcon
              icon={printLoading ? faSpinner : faPrint}
              className={`me-2 text-info ${printLoading ? "fa-spin" : ""}`}
            />
            {printLoading ? "Loading..." : "Print"}
          </button>

          <button
            className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
            onClick={() => handleActionClick(onAction, "downloadPDF", order)}
            disabled={printLoading}
          >
            <FontAwesomeIcon icon={faDownload} className="me-2 text-success" />
            Download PDF
          </button>

          <button
            className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
            onClick={() => handleActionClick(onAction, "share", order)}
          >
            <FontAwesomeIcon icon={faShare} className="me-2 text-warning" />
            Share Order
          </button>

          {/* Order Actions Section */}
          {enableActions && !isCancelled && (
            <>
              <hr className="my-2" />
              <div className="text-muted small fw-bold px-2 mb-1">
                ORDER ACTIONS
              </div>

              <button
                className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
                onClick={() => handleActionClick(onAction, "edit", order)}
              >
                <FontAwesomeIcon
                  icon={faEdit}
                  className="me-2 text-secondary"
                />
                Edit Order
              </button>

              <button
                className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
                onClick={() => handleActionClick(onAction, "convert", order)}
              >
                <FontAwesomeIcon
                  icon={faFileInvoice}
                  className="me-2 text-info"
                />
                Convert to Invoice
              </button>

              <button
                className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
                onClick={() => handleActionClick(onAction, "duplicate", order)}
              >
                <FontAwesomeIcon icon={faCopy} className="me-2 text-warning" />
                Duplicate Order
              </button>

              {/* Generation Section */}
              {hasValidPOSetup && (
                <>
                  <hr className="my-2" />
                  <div className="text-muted small fw-bold px-2 mb-1">
                    GENERATION
                  </div>
                  <button
                    className="btn btn-outline-success btn-sm w-100 text-start mb-1 d-flex align-items-center"
                    onClick={() =>
                      handleActionClick(
                        onAction,
                        "generatePurchaseOrder",
                        order
                      )
                    }
                  >
                    <FontAwesomeIcon icon={faExchangeAlt} className="me-2" />
                    Generate Purchase Order
                  </button>
                </>
              )}

              {/* Tracking Section */}
              {(order.isAutoGenerated ||
                order.hasCorrespondingPurchaseOrder ||
                order.hasGeneratedPurchaseOrder) && (
                <>
                  <hr className="my-2" />
                  <div className="text-muted small fw-bold px-2 mb-1">
                    TRACKING & SOURCE
                  </div>

                  {order.isAutoGenerated && order.sourceOrderNumber && (
                    <button
                      className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
                      onClick={() =>
                        handleActionClick(onAction, "viewSourceOrder", order)
                      }
                    >
                      <FontAwesomeIcon
                        icon={faArrowRight}
                        className="me-2 text-info"
                      />
                      <span className="text-truncate">
                        Source: {order.sourceOrderNumber}
                      </span>
                    </button>
                  )}

                  {(order.hasCorrespondingPurchaseOrder ||
                    order.hasGeneratedPurchaseOrder) && (
                    <button
                      className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
                      onClick={() =>
                        handleActionClick(
                          onAction,
                          "viewGeneratedOrders",
                          order
                        )
                      }
                    >
                      <FontAwesomeIcon
                        icon={faProjectDiagram}
                        className="me-2 text-primary"
                      />
                      View Generated Orders
                    </button>
                  )}

                  <button
                    className="btn btn-light btn-sm w-100 text-start mb-1 d-flex align-items-center"
                    onClick={() =>
                      handleActionClick(onAction, "viewTrackingChain", order)
                    }
                  >
                    <FontAwesomeIcon
                      icon={faProjectDiagram}
                      className="me-2 text-info"
                    />
                    View Tracking Chain
                  </button>
                </>
              )}

              {/* Status Actions Section */}
              <hr className="my-2" />
              <div className="text-muted small fw-bold px-2 mb-1">
                STATUS ACTIONS
              </div>

              {status === "draft" && !needsConfirmation && !isConfirmed && (
                <button
                  className="btn btn-outline-primary btn-sm w-100 text-start mb-1 d-flex align-items-center"
                  onClick={() => handleActionClick(onAction, "confirm", order)}
                >
                  <FontAwesomeIcon icon={faCheck} className="me-2" />
                  Confirm Order
                </button>
              )}

              {(status === "confirmed" || status === "pending") && (
                <button
                  className="btn btn-outline-success btn-sm w-100 text-start mb-1 d-flex align-items-center"
                  onClick={() => handleActionClick(onAction, "approve", order)}
                >
                  <FontAwesomeIcon icon={faCheckCircle} className="me-2" />
                  Approve Order
                </button>
              )}

              {status === "approved" && (
                <button
                  className="btn btn-outline-info btn-sm w-100 text-start mb-1 d-flex align-items-center"
                  onClick={() => handleActionClick(onAction, "ship", order)}
                >
                  <FontAwesomeIcon icon={faTruck} className="me-2" />
                  Mark as Shipped
                </button>
              )}

              {status === "shipped" && (
                <button
                  className="btn btn-outline-success btn-sm w-100 text-start mb-1 d-flex align-items-center"
                  onClick={() => handleActionClick(onAction, "deliver", order)}
                >
                  <FontAwesomeIcon icon={faBoxes} className="me-2" />
                  Mark as Delivered
                </button>
              )}

              {(status === "delivered" || status === "shipped") && (
                <button
                  className="btn btn-outline-success btn-sm w-100 text-start mb-1 d-flex align-items-center"
                  onClick={() => handleActionClick(onAction, "complete", order)}
                >
                  <FontAwesomeIcon icon={faCheckCircle} className="me-2" />
                  Complete Order
                </button>
              )}

              {/* Delete/Cancel Section */}
              <hr className="my-2" />
              <button
                className={`btn ${
                  status === "draft"
                    ? "btn-outline-danger"
                    : "btn-outline-warning"
                } btn-sm w-100 text-start d-flex align-items-center`}
                onClick={() => handleActionClick(onAction, "delete", order)}
                disabled={isDeleting}
              >
                <FontAwesomeIcon
                  icon={
                    isDeleting
                      ? faSpinner
                      : status === "draft"
                      ? faTrash
                      : faBan
                  }
                  className={`me-2 ${isDeleting ? "fa-spin" : ""}`}
                />
                {isDeleting
                  ? "Processing..."
                  : status === "draft"
                  ? "Delete Order"
                  : "Cancel Order"}
              </button>
            </>
          )}

          {/* Order Info Footer */}
          <hr className="my-2" />
          <div className="px-2">
            <div className="d-flex justify-content-between align-items-center">
              <small className="text-muted">
                {order.orderNumber || "No Order #"}
              </small>
              <small className="text-muted">
                {needsConfirmation && !isConfirmed ? (
                  <Badge bg="warning" size="sm">
                    Needs Action
                  </Badge>
                ) : isConfirmed ? (
                  <Badge bg="success" size="sm">
                    Confirmed
                  </Badge>
                ) : (
                  <Badge bg="secondary" size="sm">
                    {status}
                  </Badge>
                )}
              </small>
            </div>
            {isFromPurchaseOrder && (
              <div className="mt-1">
                <small className="text-info">
                  <FontAwesomeIcon icon={faRobot} className="me-1" />
                  Auto-generated from PO
                  {isConfirmed && (
                    <span className="text-success ms-1">
                      <FontAwesomeIcon icon={faCheckCircle} className="me-1" />
                      Confirmed
                    </span>
                  )}
                </small>
              </div>
            )}
          </div>
        </div>
      </div>,
      document.body
    );

  return (
    <>
      <Button
        ref={buttonRef}
        variant={
          needsConfirmation && !isConfirmed
            ? "warning"
            : isConfirmed && wasAutoGenerated
            ? "success"
            : "outline-primary"
        }
        size="sm"
        className={`action-trigger-btn ${className} ${
          needsConfirmation && !isConfirmed ? "needs-confirmation" : ""
        } ${isConfirmed && wasAutoGenerated ? "confirmed-order" : ""}`}
        onClick={handleToggle}
        disabled={isDeleting || modalLoading}
        title={
          needsConfirmation && !isConfirmed
            ? "Order needs confirmation"
            : isConfirmed && wasAutoGenerated
            ? "Order confirmed"
            : "Actions"
        }
      >
        <FontAwesomeIcon
          icon={
            needsConfirmation && !isConfirmed
              ? faExclamationTriangle
              : isConfirmed && wasAutoGenerated
              ? faCheckCircle
              : faEllipsisV
          }
        />
      </Button>
      {dropdownMenu}
    </>
  );
};

export default ActionButton;
